============================= test session starts ==============================
platform darwin -- Python 3.9.13, pytest-7.2.0, pluggy-1.0.0 -- /Users/work/Development/ENVs/supercon_ge/bin/python3
cachedir: .pytest_cache
Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>
benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/work/Development/great_expectations, configfile: pyproject.toml
plugins: random-order-1.0.4, timeout-2.1.0, mock-3.10.0, pyfakefs-5.0.0, snapshottest-0.6.0, icdiff-0.6, order-1.0.1, cov-4.0.0, anyio-3.6.2, benchmark-4.0.0
collecting ... collected 1109 items

tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multi_table_expectations/expect_table_row_count_to_equal_other_table:basic_positive] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multi_table_expectations/expect_table_row_count_to_equal_other_table:basic_negative] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_string_one_character_length] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:negative_test_string_value_is_1_too_high] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_with_missing_value_in_column_mostly] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:negative_one_length_too_small] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_one_length_too_small_mostly] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_passes] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_fails] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_parser_errors] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_test] PASSED [  0%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_test] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_timedelta_test] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_timedelta_test] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_datetime_test] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_datetime_test] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:basic_positive_test] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:positive_test_with_nulls] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_integers] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_string_only] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_null_only] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps_tz_informed] PASSED [  1%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps_tz_informed] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_all_missing_values] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:positive_mostly] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_no_mostly_one_missing] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_mostly] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:positive_case_with_mostly_and_no_unexpected_values] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_case_with_75percent_null_values_no_mostly] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:basic_positive_test] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_multiple_regexes] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:basic_negative_test] PASSED [  2%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:negative_test_with_more_string-ish_strings] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_match_on__any] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_column_name_has_space_and_match_on__any] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_successful_test] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_unsuccessful_test] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_outlier] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_mostly_zero] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_missing] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test0] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test0] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps0] PASSED [  3%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_min_value0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_min_value0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_max_value0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_max_value0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only0] PASSED [  4%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons0] PASSED [  5%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_passes0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_fails0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_parser_errors0] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value] PASSED [  6%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value_summary_output] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_exact_mostly_w_one_non_matching_value] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_column_name_has_space] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_one_missing_value_and_insufficent_mostly] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_exact_mostly] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_sufficent_mostly] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values_mostly] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_empty_regex] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_more_complicated_regex] PASSED [  7%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_match_characters_not_at_the_beginning_of_string] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_min_value1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_min_value1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_max_value1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_max_value1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps1] PASSED [  8%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more1] PASSED [  9%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success1] PASSED [ 10%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_passes1] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_fails1] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_parser_errors1] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:basic_positive_test_case_single_value_not_in_column] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_case_include_one_existing_column_value] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_empty_values_set] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:basic_negative_strings_set_all_character_values] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_strings_set_extra_value_in_column] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly_summary_output] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_float_set_two_out_of_three_column_values_included_mostly] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_values_set_is_null] PASSED [ 11%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:raise_typeerror_when_values_set_is_missing] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:basic_python_int_positive_test] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_test_python_ints_are_not_string] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_test_pandas_floats] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_test_pandas_strings] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_test_python_floats_are_not_python_bools] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics_object_underscore] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics_big_o] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_pandas_datetime_no_timezone] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_pandas_datetime_with_timezone] PASSED [ 12%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_pandas_datetime_with_timezone] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_pandas_datetime_expected_int] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_number_set] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:vacuously_true_empty_value_set] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_case_exclude_existing_column_value] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_empty_values_set] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_strings_set] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_strings_set_extra_value_in_column] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_numbers_set_no_matching_values] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:positive_test_float_set] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_float_set] PASSED [ 13%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_passes] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_fails] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_parser_errors] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_empty_column_should_be_vacuously_true] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_datetime_set] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_negative_test_case_datetime_set] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:positive_test_with_mostly] FAILED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test] FAILED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test_with_strictly] FAILED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_positive_test] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:test_empty_column_should_be_vacuously_true] PASSED [ 14%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_exact_mostly_w_one_non_matching_value] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_one_missing_value_and_insufficent_mostly] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_one_missing_value_no_exceptions] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values_mostly] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_empty_regex] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test_with_nulls] PASSED [ 15%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:negative_test] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:test_raising_exception_for_wrong_input_data_type] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_positive_test] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:positive_test_with_multiple_regexes] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_negative_test] FAILED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:negative_test_with_more_string-ish_strings] FAILED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:basic_positive_test] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:2nd_basic_positive_test] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_strictly] FAILED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:basic_negative_test] FAILED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_parse_strings_as_datetimes] PASSED [ 16%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_interspersed_nulls] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:negative_test_with_interspersed_nulls] FAILED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_exact_min_and_max] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_min_max_too_small] FAILED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_max_min_too_large] FAILED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_min_value] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_max_value] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_with_max_lt_min] FAILED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_missing_value_in_column] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_min_value] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_max_value] PASSED [ 17%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_both_null_max_and_min_values] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_values_are_integers] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_passes] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_fails] FAILED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_parser_errors] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:simple_positive_test] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_wrong_format] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_nulls] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_mostly] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:simple_negative_test] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_out_of_bounds_value_for_month] PASSED [ 18%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_iso8601] PASSED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_input_data_type] PASSED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_format] PASSED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_input_already_datetimes] SKIPPED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:basic_positive_test_case] PASSED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:basic_negative_case_all_non_unique_character_values] FAILED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:multi_type_column_contains_2_and_quoted_2_suppressed_for_sqalchemy] FAILED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_using_mostly] FAILED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_case_using_mostly] FAILED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_multiple_null_values] PASSED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_case_non_unique_numeric_values] FAILED [ 19%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_all_null_values] PASSED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_multiple_duplicate_values] FAILED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:basic_positive_test] PASSED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:positive_test_with_a_more_complex_schema] PASSED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:basic_negative_test] FAILED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format] PASSED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_no_missing_values] FAILED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:positive_mostly] FAILED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_mostly] FAILED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:positive_case_with_mostly_and_no_unexpected_values] PASSED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_case_with_75percent_non_null_values_no_mostly] FAILED [ 20%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_pandas_integer_column] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_pandas_float_values_are_not_strings] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_float_values] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_string_values] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_boolean_values] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_string_and_int_values] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_string_and_int_values_summary_output] FAILED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_string_and_int_values_complete_output] FAILED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_placeholder_expectation] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_string_one_character_length] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:negative_test_string_value_is_1_too_high] PASSED [ 21%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_with_missing_value_in_column_mostly] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:negative_one_length_too_small] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_one_length_too_small_mostly] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_test] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_test] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_timedelta_test] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_timedelta_test] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_datetime_test] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_datetime_test] PASSED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_json_parseable:basic_positive_test] SKIPPED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_json_parseable:positive_test_with_nulls] SKIPPED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_integers] SKIPPED [ 22%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_string_only] SKIPPED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_null_only] SKIPPED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps_tz_informed] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps_tz_informed] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_all_missing_values] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:positive_mostly] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_no_mostly_one_missing] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_mostly] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:positive_case_with_mostly_and_no_unexpected_values] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_case_with_75percent_null_values_no_mostly] PASSED [ 23%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex_list:basic_positive_test] SKIPPED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_multiple_regexes] SKIPPED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex_list:basic_negative_test] SKIPPED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex_list:negative_test_with_more_string-ish_strings] SKIPPED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_match_on__any] SKIPPED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_column_name_has_space_and_match_on__any] SKIPPED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_successful_test] PASSED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_unsuccessful_test] PASSED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_outlier] PASSED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_mostly_zero] PASSED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_missing] PASSED [ 24%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_min_value0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_min_value0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_max_value0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_max_value0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only0] PASSED [ 25%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value0] PASSED [ 26%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons0] SKIPPED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again0] SKIPPED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success0] PASSED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value] SKIPPED [ 27%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_exact_mostly_w_one_non_matching_value] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_column_name_has_space] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:negative_test_one_missing_value_and_insufficent_mostly] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_exact_mostly] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_sufficent_mostly] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values_mostly] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_empty_regex] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_more_complicated_regex] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_regex:positive_test_match_characters_not_at_the_beginning_of_string] SKIPPED [ 28%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_min_value1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_min_value1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_max_value1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_max_value1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only1] PASSED [ 29%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value1] PASSED [ 30%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons1] SKIPPED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again1] SKIPPED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success1] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:basic_positive_test_case_single_value_not_in_column] PASSED [ 31%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_case_include_one_existing_column_value] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_empty_values_set] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:basic_negative_strings_set_all_character_values] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_strings_set_extra_value_in_column] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_float_set_two_out_of_three_column_values_included_mostly] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_values_set_is_null] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:raise_typeerror_when_values_set_is_missing] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:basic_sqlalchemy_int_positive_test] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:negative_sqlite_integer_is_not_varchar] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:positive_test_sql_non_postgres_floats] PASSED [ 32%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:positive_test_sql_varchar] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:negative_test_sqlalchemy_floats_are_not_boolean] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_number_set] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:vacuously_true_empty_value_set] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_case_exclude_existing_column_value] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_empty_values_set] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_strings_set] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_strings_set_extra_value_in_column] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_numbers_set_no_matching_values] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:positive_test_float_set] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_float_set] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:test_empty_column_should_be_vacuously_true] PASSED [ 33%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_datetime_set] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_negative_test_case_datetime_set] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_decreasing:positive_test_with_mostly] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test_with_strictly] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_decreasing:basic_positive_test] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_decreasing:test_empty_column_should_be_vacuously_true] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_exact_mostly_w_one_non_matching_value] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_one_missing_value_and_insufficent_mostly] SKIPPED [ 34%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_one_missing_value_no_exceptions] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values_mostly] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_empty_regex] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:basic_positive_test] PASSED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:positive_test_with_multiple_like_patternes] PASSED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:negative_test_with_more_string-ish_strings] PASSED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:basic_negative_test] PASSED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test_with_nulls] SKIPPED [ 35%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_dateutil_parseable:negative_test] SKIPPED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_dateutil_parseable:test_raising_exception_for_wrong_input_data_type] SKIPPED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_insufficient_mostly_and_one_non_matching_value] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_exact_mostly_w_one_non_matching_value] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_sufficient_mostly_w_one_non_matching_value] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_one_missing_value_and_insufficent_mostly] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_one_missing_value_no_exceptions] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_all_missing_values] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_all_missing_values_mostly] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly] PASSED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_positive_test] SKIPPED [ 36%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex_list:positive_test_with_multiple_regexes] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_negative_test] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_regex_list:negative_test_with_more_string-ish_strings] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_increasing:basic_positive_test] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_increasing:2nd_basic_positive_test] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_strictly] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_parse_strings_as_datetimes] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_interspersed_nulls] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_increasing:negative_test_with_interspersed_nulls] SKIPPED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:negative_test_insufficient_mostly_and_one_non_matching_value] PASSED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_exact_mostly_w_one_non_matching_value] PASSED [ 37%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_column_name_has_space] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_sufficient_mostly_w_one_non_matching_value] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:negative_test_one_missing_value_and_insufficent_mostly] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_one_missing_value_and_exact_mostly] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_one_missing_value_and_sufficent_mostly] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_all_missing_values] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_all_missing_values_mostly] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_match_characters_not_at_the_beginning_of_string] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_exact_min_and_max] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_min_max_too_small] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_max_min_too_large] PASSED [ 38%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_min_value] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_max_value] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_with_max_lt_min] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_missing_value_in_column] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_min_value] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_max_value] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_both_null_max_and_min_values] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_values_are_integers] PASSED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:simple_positive_test] SKIPPED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_wrong_format] SKIPPED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_nulls] SKIPPED [ 39%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_mostly] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:simple_negative_test] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_out_of_bounds_value_for_month] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_iso8601] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_input_data_type] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_format] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_input_already_datetimes] SKIPPED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:basic_negative_test] PASSED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:negative_test_with_more_string-ish_strings] PASSED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:basic_positive_test] PASSED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_with_multiple_like_patternes] PASSED [ 40%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_with_match_on__any] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_column_name_has_space_and_match_on__any] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:basic_positive_test_case] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:basic_negative_case_all_non_unique_character_values] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:multi_type_column_contains_2_and_quoted_2_suppressed_for_sqalchemy] SKIPPED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_using_mostly] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_case_using_mostly] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_multiple_null_values] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_case_non_unique_numeric_values] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_all_null_values] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_multiple_duplicate_values] PASSED [ 41%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_json_schema:basic_positive_test] SKIPPED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_json_schema:positive_test_with_a_more_complex_schema] SKIPPED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_json_schema:basic_negative_test] SKIPPED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_no_missing_values] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:positive_mostly] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_mostly] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:positive_case_with_mostly_and_no_unexpected_values] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_case_with_75percent_non_null_values_no_mostly] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_sqlalchemy_integer_column] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_sqlalchemy_float_values_are_not_text] PASSED [ 42%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_float_values] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_text_values] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_boolean_values] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_text_and_integer_values] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_placeholder_expectation] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_positive_test] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:vacuously_true] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_negative_test] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_zero_stdev_exact_min_and_max] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_max_exact_min] PASSED [ 43%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_min_exact_max] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_max] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_min] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_missing_value_in_column_complete_result_format] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_positive_test] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:vacuously_true_universal_set] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_null_values_in_column] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_duplicate_values_in_column] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_duplicate_and_null_values] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_negative_test_no_set_intersection] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_some_set_intersection_and_extra] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_null_values_in_column] PASSED [ 44%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_duplicate_values_in_column] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_duplicate_and_null_values] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_tie_for_most_common_with_missing_values_and_complete_result_format] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__full_value_set__ties_okay__false] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common__ties_okay__true] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common_but_test_for_last_value__ties_okay__true] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__false] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__true] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test_string_values_value_set_contains_more_than_actual_mode_list] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_string_values_value_set_contains_more_than_actual_mode_list] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_extremes] PASSED [ 45%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_normal_quantiles] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_uneven_spacing] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_normal_quantiles_wrong_distribution] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_disordered_quantile_ranges] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:basic_positive_test_case] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:basic_negative_test_case] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:negative_test_case_with_only_a_lower_bound] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:datetime_except_sqlite] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_except_sqlite] PASSED [ 46%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_range] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match0] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_exact_match] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match1] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range_match] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_includes_null] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:vacuously_true_missing_min_and_max] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:type_mismatch_null_observed_value] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_values] PASSED [ 47%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_and_null] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_min_value] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_max_value] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_positive_test] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_null_values_in_column] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_duplicate_values_in_column] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_duplicate_and_null_values] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_negative_test_set_contained] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_some_set_intersection] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_null_values_in_column] PASSED [ 48%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_duplicate_values_in_column] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_duplicate_and_null_values] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:basic_positive_test_case] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:basic_negative_test_case] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_result_format_summary] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_lower_bound] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_max] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:basic_positive_test] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:positive_test_with_null_values_in_column] PASSED [ 49%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_min_duplicate_values_in_column] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_max_duplicate_and_null_values] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:vacuously_true_null_min_and_max] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_min_equal_max] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_min] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_max] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_min_equal_max] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_min] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_max] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_missing_value_in_column_exact_min_and_max] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_missing_value_in_column_complete_result_format] PASSED [ 50%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:vacuously_true_both_min_and_max_null] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:basic_positive_test_case] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_max_value_none] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_lower_bound] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_on_a_series_with_mostly_nulls] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_max] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:basic_positive_test] PASSED [ 51%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:positive_test_with_null_values_in_column] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:duplicate_values_in_column] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:null_max_duplicate_and_null_values] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:vacuously_true_null_min_and_max] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_null_values_in_column] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_duplicate_values_in_column] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_duplicate_and_null_values] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_no_set_intersection] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_some_set_intersection] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_null_values_in_column] PASSED [ 52%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_duplicate_values_in_column] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_duplicate_and_null_values] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_string_values] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_string_values] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_date_set] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_date_set] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_datetime_set] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_datetime_set] PASSED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:basic_failure_test] SKIPPED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:basic_pass_test] SKIPPED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:basic_pass_int_string_test] SKIPPED [ 53%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:test_string_n_bins] SKIPPED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:test_string_preconfigured_bins] SKIPPED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:test_float_bins_preconfigured_bins] SKIPPED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:test_float_with_missing] SKIPPED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_pair_cramers_phi_value_to_be_less_than:test_float_and_string_with_missings] SKIPPED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_positive_test] PASSED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:vacuously_true] PASSED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max] PASSED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max_sqlalchemy] SKIPPED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_negative_test] PASSED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_zero_stdev_exact_min_and_max] PASSED [ 54%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_max_exact_min] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_min_exact_max] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_max] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_min] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_missing_value_in_column_complete_result_format] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_positive_test] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:vacuously_true_universal_set] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_null_values_in_column] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_duplicate_values_in_column] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_duplicate_and_null_values] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_negative_test_no_set_intersection] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_some_set_intersection_and_extra] PASSED [ 55%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_null_values_in_column] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_duplicate_values_in_column] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_duplicate_and_null_values] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_tie_for_most_common_with_missing_values_and_complete_result_format] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__full_value_set__ties_okay__false] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common__ties_okay__true] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common_but_test_for_last_value__ties_okay__true] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__false] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__true] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test_string_values_value_set_contains_more_than_actual_mode_list] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_string_values_value_set_contains_more_than_actual_mode_list] PASSED [ 56%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_extremes] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_normal_quantiles] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_uneven_spacing] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_normal_quantiles_wrong_distribution] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_disordered_quantile_ranges] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:basic_positive_test_case] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:basic_negative_test_case] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:negative_test_case_with_only_a_lower_bound] PASSED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_except_sqlite] SKIPPED [ 57%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_sqlite] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_except_sqlite] SKIPPED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_sqlite] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_range] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match0] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_exact_match] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match1] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range_match] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_includes_null] PASSED [ 58%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:vacuously_true_missing_min_and_max] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:type_mismatch_null_observed_value] SKIPPED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_values] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_and_null] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_min_value] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_max_value] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_positive_test] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_null_values_in_column] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_duplicate_values_in_column] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_duplicate_and_null_values] PASSED [ 59%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_negative_test_set_contained] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_some_set_intersection] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_null_values_in_column] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_duplicate_values_in_column] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_duplicate_and_null_values] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:basic_positive_test_case] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:basic_negative_test_case] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_result_format_summary] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_lower_bound] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_max] PASSED [ 60%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:basic_positive_test] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:positive_test_with_null_values_in_column] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_min_duplicate_values_in_column] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_max_duplicate_and_null_values] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:vacuously_true_null_min_and_max] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_min_equal_max] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_min] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_max] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_min_equal_max] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_min] PASSED [ 61%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_max] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_missing_value_in_column_exact_min_and_max] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_missing_value_in_column_complete_result_format] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:vacuously_true_both_min_and_max_null] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:basic_positive_test_case] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_max_value_none] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_lower_bound] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_on_a_series_with_mostly_nulls] PASSED [ 62%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_max] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:basic_positive_test] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:positive_test_with_null_values_in_column] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:duplicate_values_in_column] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:null_max_duplicate_and_null_values] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:vacuously_true_null_min_and_max] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_null_values_in_column] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_duplicate_values_in_column] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_duplicate_and_null_values] PASSED [ 63%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_no_set_intersection] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_some_set_intersection] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_null_values_in_column] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_duplicate_values_in_column] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_duplicate_and_null_values] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_string_values] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_string_values] PASSED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_date_set] SKIPPED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_date_set] SKIPPED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_datetime_set] SKIPPED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_datetime_set] SKIPPED [ 64%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_standard_norm_distribution] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_standard_norm_distribution] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_beta_distribution_params_is_a_dict] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_beta_distribution_params_is_a_tuple] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_beta_distribution_params_is_a_dict] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_beta_distribution_params_is_a_tuple] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_gamma_distribution_params_is_a_dict] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_gamma_distribution_params_is_a_tuple] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_gamma_distribution_params_is_a_dict] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_gamma_distribution_params_is_a_tuple] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_uniform_distribution_params_is_a_dict] SKIPPED [ 65%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_uniform_distribution_params_is_a_tuple] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_uniform_distribution_params_is_a_dict] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_uniform_distribution_params_is_a_tuple] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_chi2_params_is_a_dict] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_chi2_params_is_a_tuple] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_chi2_params_is_a_dict] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_chi2_params_is_a_tuple] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_expon_distribution_params_is_a_dict] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_expon_distribution_params_is_a_tuple] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_expon_distribution_params_is_a_dict] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_expon_distribution_params_is_a_tuple] SKIPPED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_baseline_categorical_fixed_partition] PASSED [ 66%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_categorical_fixed_alternate_partition] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:internal_holdout_with_categorical_partition] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_1] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_05] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:missing_vals_no_holdout] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_explicit_infinite_endpoints] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_test_tail_weights] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_should_fail_with_no_holdout] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_should_always_succeed] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_and_partition_object_supports_profiling] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_tail_weights_should_fail_with_no_internal_holdout] PASSED [ 67%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_auto_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_uniform_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_ntile_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_kde_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_auto_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_uniform_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_ntile_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_kde_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_bimodal_auto_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_auto_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_uniform_partition] PASSED [ 68%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound_tail_weights] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound_tail_weights] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds0] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds1] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity_tail_weight] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:empty_partition] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_tail_weight] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_internal_weight] PASSED [ 69%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence0] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence1] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence_bins_do_not_cover_all_data] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_return_partitions_should_have_tail_weights] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_tail_weights_return_partitions_should_have_tail_weights] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_empty_tail_weights_in_return] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_observed_with_tail_weight_infinite_kl_divergence] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_infinite_endpoints_non_zero_tail_hold_out] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_infinite_endpoint_non_zero_tail_hold_out] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_infinite_endpoint_non_zero_tail_hold_out] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_non_zero_tail_hold_out] PASSED [ 70%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_auto_partition] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_uniform_partition] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_ntile_partition] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_kde_partition] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_auto_partition_norm_1_1_column] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_uniform_partition_norm_1_1_column] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_ntile_partition_norm_1_1_column] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_kde_partition_norm_1_1_column] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_bimodal_auto_partition] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_bimodal_kde_partition] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_auto_partition_bimodal_column] SKIPPED [ 71%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_uniform_partition_bimodal_column] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_uniform_partition_detail] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:observed_above_and_below_partition] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:expected_extends_above_partition] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:partition_extends_above_data] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:partition_above_and_below_observed] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:bad_partition_infinite_endpoints_raise_error] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:bad_partition_tail_weights_raise_error] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:bad_partition_categorical_raise_error] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_partition_object] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_partition_object] SKIPPED [ 72%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_partition_object_exact_match] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_new_categorical_vals_no_holdout] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_new_categorical_vals_holdout] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_missing_categorical_vals_no_holdout] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:continuous_partition_should_fail] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_standard_norm_distribution] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_standard_norm_distribution] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_beta_distribution_params_is_a_dict] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_beta_distribution_params_is_a_tuple] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_beta_distribution_params_is_a_dict] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_beta_distribution_params_is_a_tuple] SKIPPED [ 73%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_gamma_distribution_params_is_a_dict] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_gamma_distribution_params_is_a_tuple] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_gamma_distribution_params_is_a_dict] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_gamma_distribution_params_is_a_tuple] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_uniform_distribution_params_is_a_dict] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_uniform_distribution_params_is_a_tuple] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_uniform_distribution_params_is_a_dict] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_uniform_distribution_params_is_a_tuple] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_chi2_params_is_a_dict] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_chi2_params_is_a_tuple] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_chi2_params_is_a_dict] SKIPPED [ 74%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_chi2_params_is_a_tuple] SKIPPED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_expon_distribution_params_is_a_dict] SKIPPED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:positive_expon_distribution_params_is_a_tuple] SKIPPED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_expon_distribution_params_is_a_dict] SKIPPED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than:negative_expon_distribution_params_is_a_tuple] SKIPPED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_baseline_categorical_fixed_partition] PASSED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_categorical_fixed_alternate_partition] PASSED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:internal_holdout_with_categorical_partition] PASSED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_1] PASSED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_05] PASSED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:missing_vals_no_holdout] PASSED [ 75%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_explicit_infinite_endpoints] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_test_tail_weights] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_should_fail_with_no_holdout] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_should_always_succeed] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_and_partition_object_supports_profiling] SKIPPED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_tail_weights_should_fail_with_no_internal_holdout] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_auto_partition] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_uniform_partition] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_ntile_partition] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_kde_partition] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_auto_partition] PASSED [ 76%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_uniform_partition] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_ntile_partition] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_kde_partition] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_bimodal_auto_partition] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_auto_partition] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_uniform_partition] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound_tail_weights] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound_tail_weights] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds0] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds1] PASSED [ 77%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity_tail_weight] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:empty_partition] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_tail_weight] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_internal_weight] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence0] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence1] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence_bins_do_not_cover_all_data] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_return_partitions_should_have_tail_weights] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_tail_weights_return_partitions_should_have_tail_weights] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_empty_tail_weights_in_return] PASSED [ 78%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_observed_with_tail_weight_infinite_kl_divergence] PASSED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_infinite_endpoints_non_zero_tail_hold_out] PASSED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_infinite_endpoint_non_zero_tail_hold_out] PASSED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_infinite_endpoint_non_zero_tail_hold_out] PASSED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_non_zero_tail_hold_out] PASSED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_auto_partition] SKIPPED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_uniform_partition] SKIPPED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_ntile_partition] SKIPPED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_norm_0_1_kde_partition] SKIPPED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_auto_partition_norm_1_1_column] SKIPPED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_uniform_partition_norm_1_1_column] SKIPPED [ 79%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_ntile_partition_norm_1_1_column] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_kde_partition_norm_1_1_column] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_bimodal_auto_partition] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:positive_bimodal_kde_partition] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_auto_partition_bimodal_column] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_uniform_partition_bimodal_column] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:negative_norm_0_1_uniform_partition_detail] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:observed_above_and_below_partition] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:expected_extends_above_partition] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:partition_extends_above_data] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:partition_above_and_below_observed] SKIPPED [ 80%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:bad_partition_infinite_endpoints_raise_error] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:bad_partition_tail_weights_raise_error] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_bootstrapped_ks_test_p_value_to_be_greater_than:bad_partition_categorical_raise_error] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_partition_object] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_partition_object] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_partition_object_exact_match] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_new_categorical_vals_no_holdout] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_alternate_new_categorical_vals_holdout] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:categorical_fixed_missing_categorical_vals_no_holdout] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_chisquare_test_p_value_to_be_greater_than:continuous_partition_should_fail] SKIPPED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_positive_case] PASSED [ 81%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_upper_error] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_lower_error] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_kwargs_args] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:invalid_arguments_throws_exception] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:basic_positive_test] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:basic_negative_test] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:positive_test_with_column_order] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:column_exists_but_wrong_index] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:this_test_should_never_run] SKIPPED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:basic_positive_test] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:vacuously_true] PASSED [ 82%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:basic_negative_test] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min_value] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_min_greater_than_max] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_min_value] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_max_value] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:basic_positive_test] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_missing] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_misnamed] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_columns_are_right_but_ordering_wrong] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_extra_column] PASSED [ 83%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:null_list_provides_vacuously_true_expectation] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:basic_positive_test] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:vacuously_true] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:basic_negative_test] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min_value] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_max_lt_min] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_min_value] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_max_value] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_true] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_false] PASSED [ 84%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_missing_exact_match_true] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_column_is_missing_exact_match_false] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_true] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_false] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_true] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_false] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_true] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_false] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_null_set_exact_match_true] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_vacuously_true_null_set_exact_match_false] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_positive_case] PASSED [ 85%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_upper_error] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_lower_error] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_kwargs_args] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:invalid_arguments_throws_exception] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_positive_case] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_upper_error] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_lower_error] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_kwargs_args] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:invalid_arguments_throws_exception] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:basic_positive_test] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:basic_negative_test] PASSED [ 86%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:positive_test_with_column_order] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:column_exists_but_wrong_index] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:this_test_should_never_run] SKIPPED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:basic_positive_test] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:vacuously_true] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:basic_negative_test] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min_value] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_min_greater_than_max] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_min_value] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_max_value] PASSED [ 87%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:basic_positive_test] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_missing] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_misnamed] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_columns_are_right_but_ordering_wrong] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_extra_column] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:null_list_provides_vacuously_true_expectation] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:basic_positive_test] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:vacuously_true] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:basic_negative_test] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min_value] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_max_lt_min] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min] PASSED [ 88%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_min_value] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_max_value] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_true] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_false] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_missing_exact_match_true] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_column_is_missing_exact_match_false] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_true] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_false] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_true] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_false] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_true] PASSED [ 89%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_false] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_null_set_exact_match_true] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_vacuously_true_null_set_exact_match_false] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_positive_case] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_upper_error] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_lower_error] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_kwargs_args] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:invalid_arguments_throws_exception] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_successful_expectation] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_fails_expectation] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_successful_expectation] PASSED [ 90%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_fails_expectation] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_incorrectly] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_all_are_missing_the_default_behavior] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_any_are_missing] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:row_condition_with_ignore_if_any_are_missing] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_with_unexpected_index_list] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_without_unexpected_index_list] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_with_unexpected_index_list] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_without_unexpected_index_list] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_successful_expectation] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_fails_expectation] PASSED [ 91%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_successful_expectation] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_fails_expectation] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_incorrectly] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_all_are_missing_the_default_behavior] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_any_are_missing] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_with_index_list] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_no_index_list] SKIPPED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_without_unexpected_index_list] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_successful_expectation] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_fails_expectation] PASSED [ 92%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_successful_expectation] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_fails_expectation] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_incorrectly] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test_more_than_2_columns] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:row_condition_with_ignore_if_any_are_missing] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_negative_test] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_with_ignore_if_any_are_missing] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_different_value] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_successful_expectation] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_fails_expectation] PASSED [ 93%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_successful_expectation] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_fails_expectation] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_incorrectly] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_all_are_missing_the_default_behavior] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_any_are_missing] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_without_unexpected_index_list] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_without_unexpected_index_list] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_successful_expectation] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_fails_expectation] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_successful_expectation] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_fails_expectation] PASSED [ 94%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_incorrectly] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_all_are_missing_the_default_behavior] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_any_are_missing] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_no_index_list] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_without_unexpected_index_list] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_successful_expectation] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_fails_expectation] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_successful_expectation] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_fails_expectation] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_incorrectly] PASSED [ 95%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test_more_than_2_columns] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_negative_test] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_with_ignore_if_any_are_missing] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_different_value] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:trivial_case:_x__x] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_number_to_text] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_numbers] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_number_to_text] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_numbers] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_number_to_text] PASSED [ 96%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_numbers] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_explicitly] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_by_default] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_mostly] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_ignore_row_if__either_value_is_missing] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:positive_test_with_nulls_and_ignore_row_if_either_value_is_missing] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:negative_test_with_nulls] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:another_positive_test_with_nulls] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test] PASSED [ 97%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties_with_or_equal] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_parse_strings_as_datetimes_and_mostly] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_mostly] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:trivial_case:_x__x] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_numbers] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_numbers] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_numbers] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_explicitly] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_by_default] PASSED [ 98%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_mostly] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_ignore_row_if__either_value_is_missing] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:positive_test_with_nulls_and_ignore_row_if_either_value_is_missing] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:negative_test_with_nulls] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:another_positive_test_with_nulls] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties_with_or_equal] PASSED [ 99%]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_mostly] PASSED [100%]

=================================== FAILURES ===================================
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:positive_test_with_mostly] _

test_case = {'expectation_type': 'expect_column_values_to_be_decreasing', 'pk_column': True, 'skip': False, 'test': {'exact_match_..., 'in': {'column': 'w', 'mostly': 0.6}, 'include_in_gallery': True, 'input': {'column': 'w', 'mostly': 0.6}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
great_expectations/self_check/util.py:2945: in check_json_test_result
    ) = sort_unexpected_values(
great_expectations/self_check/util.py:2716: in sort_unexpected_values
    result_value_list = sorted(
great_expectations/self_check/util.py:2718: in <lambda>
    key=lambda x: tuple(x[k] for k in list(test_value_list[0].keys())),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7ff1dec64580>

>       key=lambda x: tuple(x[k] for k in list(test_value_list[0].keys())),
    )
E   TypeError: 'int' object is not subscriptable

great_expectations/self_check/util.py:2718: TypeError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3809.54it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 413.07it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 584.93it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 319.15it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 406.50it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 320.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 518.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 484.66it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 480.54it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test] _

test_case = {'expectation_type': 'expect_column_values_to_be_decreasing', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': False, 'in': {'column': 'y'}, 'include_in_gallery': True, 'input': {'column': 'y'}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
great_expectations/self_check/util.py:2945: in check_json_test_result
    ) = sort_unexpected_values(
great_expectations/self_check/util.py:2716: in sort_unexpected_values
    result_value_list = sorted(
great_expectations/self_check/util.py:2718: in <lambda>
    key=lambda x: tuple(x[k] for k in list(test_value_list[0].keys())),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7ff1e0425b80>

>       key=lambda x: tuple(x[k] for k in list(test_value_list[0].keys())),
    )
E   TypeError: 'int' object is not subscriptable

great_expectations/self_check/util.py:2718: TypeError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4082.05it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 426.19it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 605.70it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 332.93it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 419.93it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 311.98it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.66it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 460.66it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 458.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 456.35it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test_with_strictly] _

test_case = {'expectation_type': 'expect_column_values_to_be_decreasing', 'pk_column': True, 'skip': False, 'test': {'exact_match_..., {'pk_index': 3, 'y': 2}, {'pk_index': 4, 'y': 2}, {'pk_index': 5, 'y': 2}, {'pk_index': 6, 'y': 3}, ...]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
great_expectations/self_check/util.py:2945: in check_json_test_result
    ) = sort_unexpected_values(
great_expectations/self_check/util.py:2716: in sort_unexpected_values
    result_value_list = sorted(
great_expectations/self_check/util.py:2718: in <lambda>
    key=lambda x: tuple(x[k] for k in list(test_value_list[0].keys())),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7ff1e078c1c0>

>       key=lambda x: tuple(x[k] for k in list(test_value_list[0].keys())),
    )
E   TypeError: 'int' object is not subscriptable

great_expectations/self_check/util.py:2718: TypeError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4021.38it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 427.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 607.64it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 337.49it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 440.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 342.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 505.02it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 464.20it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 461.51it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 459.01it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_negative_test] _

test_case = {'expectation_type': 'expect_column_values_to_not_match_regex_list', 'pk_column': True, 'skip': False, 'test': {'exact...['[12]+', '[45]+']}, 'include_in_gallery': True, 'input': {'column': 'w', 'regex_list': ['[12]+', '[45]+']}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'w', 'regex_list': ['[12]+', '[45]+']}, 'include_in_gallery': True, 'input': {'column': 'w', 'regex_list': ['[12]+', '[45]+']}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...ue': '222'}, {'count': 1, 'value': '321'}, {'count': 1, 'value': '444'}, {'count': 1, 'value': '456'}, ...], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de642d30>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'w': '111', 'pk_index': 0}, {'w': '222', 'pk_index': 1}, {'w': '123', 'pk_index': 3}, {'w': '321', 'pk_index': 4}, {'w': '444', 'pk_index': 5}, {'w': '456', 'pk_index': 6}, {'w': '654', 'pk_index': 7}, {'w': '555', 'pk_index': 8}] != [0, 1, 3, 4, 5, 6, 7, 8]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3520.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 356.57it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 503.36it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 279.93it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 353.36it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 274.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 434.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 404.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 403.26it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 401.35it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:negative_test_with_more_string-ish_strings] _

test_case = {'expectation_type': 'expect_column_values_to_not_match_regex_list', 'pk_column': True, 'skip': False, 'test': {'exact...mus', 'ovat', 'h.*t']}, 'out': {'success': False, 'unexpected_index_list': [4], 'unexpected_list': ['hat']}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'x', 'regex_list': ['opatomus', 'ovat', 'h.*t']}, 'input': {'column': 'x',...'opatomus', 'ovat', 'h.*t']}, 'out': {'success': False, 'unexpected_index_list': [4], 'unexpected_list': ['hat']}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...10, 'missing_count': 0, 'missing_percent': 0.0, 'partial_unexpected_counts': [{'count': 1, 'value': 'hat'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de642d30>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'x': 'hat', 'pk_index': 4}] != [4]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4056.39it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 440.81it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 625.64it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 344.67it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 416.67it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 326.42it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 519.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 484.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 480.58it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_strictly] _

test_case = {'expectation_type': 'expect_column_values_to_be_increasing', 'pk_column': True, 'skip': False, 'test': {'exact_match_...ut': {'success': False, 'unexpected_index_list': [1, 2, 4, 5, 7, 8], 'unexpected_list': [1, 1, 2, 2, 3, 3]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'y', 'strictly': True}, 'input': {'column': 'y', 'strictly': True}, 'out': {'success': False, 'unexpected_index_list': [1, 2, 4, 5, 7, 8], 'unexpected_list': [1, 1, 2, 2, 3, 3]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...'partial_unexpected_counts': [{'count': 2, 'value': 1}, {'count': 2, 'value': 2}, {'count': 2, 'value': 3}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de65c070>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'y': 1, 'pk_index': 1}, {'y': 1, 'pk_index': 2}, {'y': 2, 'pk_index': 4}, {'y': 2, 'pk_index': 5}, {'y': 3, 'pk_index': 7}, {'y': 3, 'pk_index': 8}] != [1, 2, 4, 5, 7, 8]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3990.77it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 425.54it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 602.75it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 329.27it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 414.62it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 323.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.98it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 477.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 475.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 473.68it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:basic_negative_test] _

test_case = {'expectation_type': 'expect_column_values_to_be_increasing', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': False, 'in': {'column': 'w'}, 'include_in_gallery': True, 'input': {'column': 'w'}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'w'}, 'include_in_gallery': True, 'input': {'column': 'w'}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...': [{'count': 1, 'value': 1}, {'count': 1, 'value': 2}, {'count': 1, 'value': 3}, {'count': 1, 'value': 4}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de65c070>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'w': 4, 'pk_index': 6}, {'w': 3, 'pk_index': 7}, {'w': 2, 'pk_index': 8}, {'w': 1, 'pk_index': 9}] != [6, 7, 8, 9]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3832.16it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 411.35it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 580.82it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 327.80it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 430.88it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 336.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 537.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 500.27it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 498.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 495.76it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:negative_test_with_interspersed_nulls] _

test_case = {'expectation_type': 'expect_column_values_to_be_increasing', 'pk_column': True, 'skip': False, 'test': {'exact_match_..., 'input': {'column': 'b'}, 'out': {'success': False, 'unexpected_index_list': [7], 'unexpected_list': [1]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'b'}, 'input': {'column': 'b'}, 'out': {'success': False, 'unexpected_index_list': [7], 'unexpected_list': [1]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c... 10, 'missing_count': 7, 'missing_percent': 70.0, 'partial_unexpected_counts': [{'count': 1, 'value': 1.0}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de65c070>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'b': 1.0, 'pk_index': 7}] != [7]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3874.65it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 412.78it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 582.06it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 328.77it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 428.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 335.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 538.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 501.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 499.48it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 497.04it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_min_max_too_small] _

test_case = {'expectation_type': 'expect_column_value_lengths_to_be_between', 'pk_column': True, 'skip': False, 'test': {'exact_ma...: 8, 'min_value': 4}, 'include_in_gallery': True, 'input': {'column': 's2', 'max_value': 8, 'min_value': 4}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 's2', 'max_value': 8, 'min_value': 4}, 'include_in_gallery': True, 'input': {'column': 's2', 'max_value': 8, 'min_value': 4}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...issing_count': 0, 'missing_percent': 0.0, 'partial_unexpected_counts': [{'count': 1, 'value': 'collected'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de309f70>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'s2': 'collected', 'pk_index': 2}] != [2]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3905.31it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 315.75it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 450.79it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 247.75it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 362.61it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 269.12it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 344.07it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 288.90it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 394.25it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 369.65it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 368.58it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 367.34it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_max_min_too_large] _

test_case = {'expectation_type': 'expect_column_value_lengths_to_be_between', 'pk_column': True, 'skip': False, 'test': {'exact_ma...value': 5}, 'out': {'success': False, 'unexpected_index_list': [0, 1], 'unexpected_list': ['calm', 'cool']}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 's2', 'max_value': 9, 'min_value': 5}, 'input': {'column': 's2', 'max_valu... 'min_value': 5}, 'out': {'success': False, 'unexpected_index_list': [0, 1], 'unexpected_list': ['calm', 'cool']}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c..._percent': 0.0, 'partial_unexpected_counts': [{'count': 1, 'value': 'calm'}, {'count': 1, 'value': 'cool'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de309f70>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'s2': 'cool', 'pk_index': 0}, {'s2': 'calm', 'pk_index': 1}] != [0, 1]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3795.75it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 332.12it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 477.80it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 235.41it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 321.30it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 218.28it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 279.03it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 242.35it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 339.12it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 319.94it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 319.00it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 317.86it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_with_max_lt_min] _

test_case = {'expectation_type': 'expect_column_value_lengths_to_be_between', 'pk_column': True, 'skip': False, 'test': {'exact_ma... 'unexpected_index_list': [0, 1, 2, 3, 4], 'unexpected_list': ['sassy', 'sexy', 'silly', 'slimy', 'smart']}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 's1', 'max_value': 0, 'min_value': 1}, 'input': {'column': 's1', 'max_valu...False, 'unexpected_index_list': [0, 1, 2, 3, 4], 'unexpected_list': ['sassy', 'sexy', 'silly', 'slimy', 'smart']}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...': 'sexy'}, {'count': 1, 'value': 'silly'}, {'count': 1, 'value': 'slimy'}, {'count': 1, 'value': 'smart'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de309f70>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'s1': 'smart', 'pk_index': 0}, {'s1': 'silly', 'pk_index': 1}, {'s1': 'sassy', 'pk_index': 2}, {'s1': 'slimy', 'pk_index': 3}, {'s1': 'sexy', 'pk_index': 4}] != [0, 1, 2, 3, 4]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3656.76it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 313.77it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 450.39it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 246.51it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 363.21it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 267.87it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 341.37it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 287.27it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 393.08it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 368.63it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 367.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 366.40it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_fails] _

test_case = {'expectation_type': 'expect_column_value_lengths_to_be_between', 'pk_column': True, 'skip': False, 'test': {'exact_ma...ceptions': True, 'column': 's1', 'condition_parser': 'pandas', 'max_value': 4, ...}, 'only_for': ['pandas'], ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'catch_exceptions': True, 'column': 's1', 'condition_parser': 'pandas', 'max_value':...tch_exceptions': True, 'column': 's1', 'condition_parser': 'pandas', 'max_value': 4, ...}, 'only_for': ['pandas'], ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c..., 'missing_count': 0, 'missing_percent': 0.0, 'partial_unexpected_counts': [{'count': 1, 'value': 'slimy'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de309f70>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'s1': 'slimy', 'pk_index': 3}] != [3]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 834.44it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 308.08it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 447.69it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 281.27it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 366.22it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 288.27it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 358.20it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 311.54it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 380.44it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 361.54it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 360.41it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 359.24it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:basic_negative_case_all_non_unique_character_values] _

test_case = {'expectation_type': 'expect_column_values_to_be_unique', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': False, 'in': {'column': 'a'}, 'include_in_gallery': True, 'input': {'column': 'a'}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'a'}, 'include_in_gallery': True, 'input': {'column': 'a'}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...: 4, 'missing_count': 1, 'missing_percent': 25.0, 'partial_unexpected_counts': [{'count': 3, 'value': '2'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de68be20>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'a': '2', 'pk_index': 0}, {'a': '2', 'pk_index': 1}, {'a': '2', 'pk_index': 2}] != [0, 1, 2]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3899.86it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 466.76it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 656.18it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 370.97it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 518.46it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 402.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 625.63it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 582.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 579.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 576.67it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:multi_type_column_contains_2_and_quoted_2_suppressed_for_sqalchemy] _

test_case = {'expectation_type': 'expect_column_values_to_be_unique', 'pk_column': True, 'skip': False, 'test': {'exact_match_out'...: 'c', 'mostly': 0.3}, 'out': {'success': True, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'c', 'mostly': 0.3}, 'input': {'column': 'c', 'mostly': 0.3}, 'out': {'success': True, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...: 4, 'missing_count': 1, 'missing_percent': 25.0, 'partial_unexpected_counts': [{'count': 2, 'value': 1.0}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de68be20>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'c': 1.0, 'pk_index': 0}, {'c': 1.0, 'pk_index': 1}] != [0, 1]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3350.08it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 419.75it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 591.50it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 330.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 468.48it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 369.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 583.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 538.89it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_using_mostly] _

test_case = {'expectation_type': 'expect_column_values_to_be_unique', 'pk_column': True, 'skip': False, 'test': {'exact_match_out'...: 'c', 'mostly': 0.3}, 'out': {'success': True, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'c', 'mostly': 0.3}, 'input': {'column': 'c', 'mostly': 0.3}, 'out': {'success': True, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...: 4, 'missing_count': 1, 'missing_percent': 25.0, 'partial_unexpected_counts': [{'count': 2, 'value': 1.0}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de68be20>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'c': 1.0, 'pk_index': 0}, {'c': 1.0, 'pk_index': 1}] != [0, 1]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2522.89it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 286.01it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 390.37it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 190.62it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 280.63it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 231.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 379.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 359.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 357.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 356.38it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_case_using_mostly] _

test_case = {'expectation_type': 'expect_column_values_to_be_unique', 'pk_column': True, 'skip': False, 'test': {'exact_match_out'... 'c', 'mostly': 0.4}, 'out': {'success': False, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'c', 'mostly': 0.4}, 'input': {'column': 'c', 'mostly': 0.4}, 'out': {'success': False, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...: 4, 'missing_count': 1, 'missing_percent': 25.0, 'partial_unexpected_counts': [{'count': 2, 'value': 1.0}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de68be20>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'c': 1.0, 'pk_index': 0}, {'c': 1.0, 'pk_index': 1}] != [0, 1]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4056.39it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 488.48it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 687.10it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 370.17it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 515.76it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 399.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 615.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 573.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 570.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 567.60it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_case_non_unique_numeric_values] _

test_case = {'expectation_type': 'expect_column_values_to_be_unique', 'pk_column': True, 'skip': False, 'test': {'exact_match_out'...ut': {'column': 'c'}, 'out': {'success': False, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'c'}, 'input': {'column': 'c'}, 'out': {'success': False, 'unexpected_index_list': [0, 1], 'unexpected_list': [1, 1]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...: 4, 'missing_count': 1, 'missing_percent': 25.0, 'partial_unexpected_counts': [{'count': 2, 'value': 1.0}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de68be20>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'c': 1.0, 'pk_index': 0}, {'c': 1.0, 'pk_index': 1}] != [0, 1]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3890.82it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 477.66it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 669.91it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 379.08it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 513.35it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 376.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 503.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 500.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 495.79it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_multiple_duplicate_values] _

test_case = {'expectation_type': 'expect_column_values_to_be_unique', 'pk_column': True, 'skip': False, 'test': {'exact_match_out'..., 'out': {'success': False, 'unexpected_index_list': [0, 1, 2, 3], 'unexpected_list': ['1', '1', '2', '2']}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'mult_dup'}, 'input': {'column': 'mult_dup'}, 'out': {'success': False, 'unexpected_index_list': [0, 1, 2, 3], 'unexpected_list': ['1', '1', '2', '2']}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...issing_percent': 0.0, 'partial_unexpected_counts': [{'count': 2, 'value': '1'}, {'count': 2, 'value': '2'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de68be20>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'mult_dup': '1', 'pk_index': 0}, {'mult_dup': '1', 'pk_index': 1}, {'mult_dup': '2', 'pk_index': 2}, {'mult_dup': '2', 'pk_index': 3}] != [0, 1, 2, 3]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3938.31it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 372.74it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 503.62it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 235.78it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 320.33it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 269.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 448.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 426.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 424.85it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 423.10it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:basic_negative_test] _

test_case = {'expectation_type': 'expect_column_values_to_match_json_schema', 'pk_column': True, 'skip': False, 'test': {'exact_ma...rue, 'input': {'column': 'x', 'json_schema': {'properties': {'a': {'type': 'integer'}}, 'required': ['b']}}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'x', 'json_schema': {'properties': {'a': {'type': 'integer'}}, 'required':...ry': True, 'input': {'column': 'x', 'json_schema': {'properties': {'a': {'type': 'integer'}}, 'required': ['b']}}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...2}'}, {'count': 1, 'value': '{"a":3}'}, {'count': 1, 'value': '{"a":4}'}, {'count': 1, 'value': '{"a":5}'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de036fa0>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'x': '{"a":1}', 'pk_index': 0}, {'x': '{"a":2}', 'pk_index': 1}, {'x': '{"a":3}', 'pk_index': 2}, {'x': '{"a":4}', 'pk_index': 3}, {'x': '{"a":5}', 'pk_index': 4}] != [0, 1, 2, 3, 4]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3968.12it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 420.17it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 595.50it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 330.58it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 279.43it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 234.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 395.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 373.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 372.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 371.44it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_no_missing_values] _

test_case = {'expectation_type': 'expect_column_values_to_be_null', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': False, 'in': {'column': 'no_null'}, 'include_in_gallery': True, 'input': {'column': 'no_null'}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'no_null'}, 'include_in_gallery': True, 'input': {'column': 'no_null'}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...ll': 'c', 'pk_index': 2}, {'no_null': 'd', 'pk_index': 3}], 'partial_unexpected_list': ['a', 'b', 'c', 'd'], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de6d7700>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'no_null': 'a', 'pk_index': 0}, {'no_null': 'b', 'pk_index': 1}, {'no_null': 'c', 'pk_index': 2}, {'no_null': 'd', 'pk_index': 3}] != [0, 1, 2, 3]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 4032.98it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 618.08it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 847.96it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 460.91it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 543.85it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 405.60it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 635.68it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 587.28it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 583.17it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 578.37it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:positive_mostly] _

test_case = {'expectation_type': 'expect_column_values_to_be_null', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': ...hree_null', 'mostly': 0.75}, 'out': {'success': True, 'unexpected_index_list': [3], 'unexpected_list': [5]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'three_null', 'mostly': 0.75}, 'input': {'column': 'three_null', 'mostly': 0.75}, 'out': {'success': True, 'unexpected_index_list': [3], 'unexpected_list': [5]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...}], 'partial_unexpected_index_list': [{'pk_index': 3, 'three_null': 5.0}], 'partial_unexpected_list': [5.0], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de6d7700>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'three_null': 5.0, 'pk_index': 3}] != [3]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3968.12it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 593.46it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 819.20it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 445.70it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 533.19it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 398.84it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 625.44it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 580.60it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 576.71it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 572.34it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_mostly] _

test_case = {'expectation_type': 'expect_column_values_to_be_null', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': ...hree_null', 'mostly': 0.8}, 'out': {'success': False, 'unexpected_index_list': [3], 'unexpected_list': [5]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'three_null', 'mostly': 0.8}, 'input': {'column': 'three_null', 'mostly': 0.8}, 'out': {'success': False, 'unexpected_index_list': [3], 'unexpected_list': [5]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...}], 'partial_unexpected_index_list': [{'pk_index': 3, 'three_null': 5.0}], 'partial_unexpected_list': [5.0], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de6d7700>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'three_null': 5.0, 'pk_index': 3}] != [3]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3718.35it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 554.03it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 764.50it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 454.14it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 547.06it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 414.60it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 658.43it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 611.39it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 607.54it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 602.78it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_case_with_75percent_non_null_values_no_mostly] _

test_case = {'expectation_type': 'expect_column_values_to_be_null', 'pk_column': True, 'skip': False, 'test': {'exact_match_out': ...': 'one_null'}, 'out': {'success': False, 'unexpected_index_list': [0, 1, 3], 'unexpected_list': [4, 5, 7]}, ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 'one_null'}, 'input': {'column': 'one_null'}, 'out': {'success': False, 'unexpected_index_list': [0, 1, 3], 'unexpected_list': [4, 5, 7]}, ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...e_null': 5.0, 'pk_index': 1}, {'one_null': 7.0, 'pk_index': 3}], 'partial_unexpected_list': [4.0, 5.0, 7.0], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de6d7700>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'one_null': 4.0, 'pk_index': 0}, {'one_null': 5.0, 'pk_index': 1}, {'one_null': 7.0, 'pk_index': 3}] != [0, 1, 3]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 4007.94it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 618.81it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 858.61it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 492.94it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 591.62it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 446.78it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 704.29it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 650.56it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 645.99it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 640.88it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_string_and_int_values_summary_output] _

test_case = {'expectation_type': 'expect_column_values_to_be_in_type_list', 'pk_column': True, 'skip': False, 'test': {'exact_matc...lumn': 's', 'type_list': ['bool']}, 'input': {'column': 's', 'type_list': ['bool']}, 'only_for': ['pandas'], ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 's', 'type_list': ['bool']}, 'input': {'column': 's', 'type_list': ['bool']}, 'only_for': ['pandas'], ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...ected_counts': [{'count': 1, 'value': '1'}, {'count': 1, 'value': 'hello'}, {'count': 1, 'value': 'jello'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de6f3b80>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'s': 'hello', 'pk_index': 0}, {'s': 'jello', 'pk_index': 1}, {'s': '1', 'pk_index': 2}] != [0, 1, 2]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3272.96it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 322.95it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 455.37it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 255.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 364.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 274.67it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 407.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 365.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 362.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 360.32it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_string_and_int_values_complete_output] _

test_case = {'expectation_type': 'expect_column_values_to_be_in_type_list', 'pk_column': True, 'skip': False, 'test': {'exact_matc...lumn': 's', 'type_list': ['bool']}, 'input': {'column': 's', 'type_list': ['bool']}, 'only_for': ['pandas'], ...}, ...}

    @pytest.mark.order(index=0)
    @pytest.mark.integration
    @pytest.mark.slow  # 12.68s
    def test_case_runner_v3_api(test_case):
        if test_case["skip"]:
            pytest.skip()

        # Note: this should never be done in practice, but we are wiping expectations to reuse batches during testing.
        # test_case["batch"]._initialize_expectations()
        if "parse_strings_as_datetimes" in test_case["test"]["in"]:
            with pytest.deprecated_call():
                evaluate_json_test_v3_api(
                    validator=test_case["validator_with_data"],
                    expectation_type=test_case["expectation_type"],
                    test=test_case["test"],
                    pk_column=test_case["pk_column"],
                )
        else:
>           evaluate_json_test_v3_api(
                validator=test_case["validator_with_data"],
                expectation_type=test_case["expectation_type"],
                test=test_case["test"],
                pk_column=test_case["pk_column"],
            )

tests/test_definitions/test_expectations_v3_api.py:418:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
great_expectations/self_check/util.py:2901: in evaluate_json_test_v3_api
    check_json_test_result(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = {'exact_match_out': False, 'in': {'column': 's', 'type_list': ['bool']}, 'input': {'column': 's', 'type_list': ['bool']}, 'only_for': ['pandas'], ...}
result = {'exception_info': {'exception_message': None, 'exception_traceback': None, 'raised_exception': False}, 'expectation_c...ected_counts': [{'count': 1, 'value': '1'}, {'count': 1, 'value': 'hello'}, {'count': 1, 'value': 'jello'}], ...}, ...}
data_asset = <great_expectations.execution_engine.pandas_batch_data.PandasBatchData object at 0x7ff1de6f3b80>
pk_column = True

    def check_json_test_result(  # noqa: C901 - 52
        test, result, data_asset=None, pk_column=False
    ) -> None:

        # check for id_pk results in cases where pk_column is true and unexpected_index_list already exists
        # this will work for testing since result_format is COMPLETE
        if pk_column:
            if not result["success"]:
                if "unexpected_index_list" in result["result"]:
                    assert "unexpected_index_query" in result["result"]

        if "unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )
            elif "unexpected_list" in test["output"]:
                (
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["unexpected_list"],
                    result["result"]["unexpected_list"],
                )

        if "partial_unexpected_list" in result["result"]:
            if ("result" in test["output"]) and (
                "partial_unexpected_list" in test["output"]["result"]
            ):
                (
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["result"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )
            elif "partial_unexpected_list" in test["output"]:
                (
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                ) = sort_unexpected_values(
                    test["output"]["partial_unexpected_list"],
                    result["result"]["partial_unexpected_list"],
                )

        # Determine if np.allclose(..) might be needed for float comparison
        try_allclose = False
        if "observed_value" in test["output"]:
            if RX_FLOAT.match(repr(test["output"]["observed_value"])):
                try_allclose = True

        # Check results
        if test["exact_match_out"] is True:
            if "result" in result and "observed_value" in result["result"]:
                if isinstance(result["result"]["observed_value"], (np.floating, float)):
                    assert np.allclose(
                        result["result"]["observed_value"],
                        expectationValidationResultSchema.load(test["output"])["result"][
                            "observed_value"
                        ],
                        rtol=RTOL,
                        atol=ATOL,
                    ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {expectationValidationResultSchema.load(test['output'])['result']['observed_value']}"
                else:
                    assert result == expectationValidationResultSchema.load(
                        test["output"]
                    ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
            else:
                assert result == expectationValidationResultSchema.load(
                    test["output"]
                ), f"{result} != {expectationValidationResultSchema.load(test['output'])}"
        else:
            # Convert result to json since our tests are reading from json so cannot easily contain richer types (e.g. NaN)
            # NOTE - 20191031 - JPC - we may eventually want to change these tests as we update our view on how
            # representations, serializations, and objects should interact and how much of that is shown to the user.
            result = result.to_json_dict()
            for key, value in test["output"].items():
                # Apply our great expectations-specific test logic

                if key == "success":
                    if isinstance(value, (np.floating, float)):
                        try:
                            assert np.allclose(
                                result["success"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['success']} not np.allclose to {value}"
                        except TypeError:
                            assert (
                                result["success"] == value
                            ), f"{result['success']} != {value}"
                    else:
                        assert result["success"] == value, f"{result['success']} != {value}"

                elif key == "observed_value":
                    if "tolerance" in test:
                        if isinstance(value, dict):
                            assert set(result["result"]["observed_value"].keys()) == set(
                                value.keys()
                            ), f"{set(result['result']['observed_value'].keys())} != {set(value.keys())}"
                            for k, v in value.items():
                                assert np.allclose(
                                    result["result"]["observed_value"][k],
                                    v,
                                    rtol=test["tolerance"],
                                )
                        else:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=test["tolerance"],
                            )
                    else:
                        if isinstance(value, dict) and "values" in value:
                            try:
                                assert np.allclose(
                                    result["result"]["observed_value"]["values"],
                                    value["values"],
                                    rtol=RTOL,
                                    atol=ATOL,
                                ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']['values']} not np.allclose to {value['values']}"
                            except TypeError as e:
                                print(e)
                                assert (
                                    result["result"]["observed_value"] == value
                                ), f"{result['result']['observed_value']} != {value}"
                        elif try_allclose:
                            assert np.allclose(
                                result["result"]["observed_value"],
                                value,
                                rtol=RTOL,
                                atol=ATOL,
                            ), f"(RTOL={RTOL}, ATOL={ATOL}) {result['result']['observed_value']} not np.allclose to {value}"
                        else:
                            assert (
                                result["result"]["observed_value"] == value
                            ), f"{result['result']['observed_value']} != {value}"

                # NOTE: This is a key used ONLY for testing cases where an expectation is legitimately allowed to return
                # any of multiple possible observed_values. expect_column_values_to_be_of_type is one such expectation.
                elif key == "observed_value_list":
                    assert result["result"]["observed_value"] in value

                elif key == "unexpected_index_list":
                    if isinstance(data_asset, (SqlAlchemyDataset, SparkDFDataset)):
                        pass
                    elif isinstance(data_asset, (SqlAlchemyBatchData, SparkDFBatchData)):
                        pass
                    else:
>                       assert (
                            result["result"]["unexpected_index_list"] == value
                        ), f"{result['result']['unexpected_index_list']} != {value}"
E                       AssertionError: [{'s': 'hello', 'pk_index': 0}, {'s': 'jello', 'pk_index': 1}, {'s': '1', 'pk_index': 2}] != [0, 1, 2]

great_expectations/self_check/util.py:3075: AssertionError
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3744.91it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 423.26it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 593.81it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 337.64it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 477.10it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 354.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 504.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 501.80it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 499.30it/s]
=============================== warnings summary ===============================
../../../../Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/inspect.py:351
  /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/inspect.py:351: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.
    value = getattr(object, key)

../../../../Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/inspect.py:351
  /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/inspect.py:351: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.
    value = getattr(object, key)

../../../../Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/inspect.py:351
  /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/inspect.py:351: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.
    value = getattr(object, key)

../ENVs/supercon_ge/lib/python3.9/site-packages/botocore/httpsession.py:18
  /Users/work/Development/ENVs/supercon_ge/lib/python3.9/site-packages/botocore/httpsession.py:18: DeprecationWarning: 'urllib3.contrib.pyopenssl' module is deprecated and will be removed in a future release of urllib3 2.x. Read more in this issue: https://github.com/urllib3/urllib3/issues/2680
    from urllib3.contrib.pyopenssl import orig_util_SSLContext as SSLContext

tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format]
tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format]
  /Users/work/Development/great_expectations/great_expectations/expectations/metrics/map_metric_provider.py:1527: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
    return list(domain_values[: result_format["partial_unexpected_count"]])

tests/test_definitions/test_expectations_v3_api.py: 39 warnings
  /Users/work/Development/great_expectations/great_expectations/core/expectation_validation_result.py:139: DeprecationWarning: NotImplemented should not be used in a boolean context
    return all(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
_ test_case_runner_v3_api[sqlite/multi_table_expectations/expect_table_row_count_to_equal_other_table:basic_positive] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 752.41it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 544.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 386.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 372.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 368.09it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 362.58it/s]
_ test_case_runner_v3_api[sqlite/multi_table_expectations/expect_table_row_count_to_equal_other_table:basic_negative] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3148.88it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1594.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1134.75it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1025.13it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 996.27it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 962.93it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_string_one_character_length] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 1835.18it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 347.77it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 496.29it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 289.52it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 365.23it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 282.63it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 353.66it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 300.69it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 407.26it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 383.49it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 381.93it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 379.76it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:negative_test_string_value_is_1_too_high] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3623.59it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 397.45it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 565.70it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 305.84it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 426.09it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 305.52it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 388.99it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 331.63it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 442.18it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 415.88it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 414.35it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 412.60it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_with_missing_value_in_column_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3466.37it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 347.28it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 490.43it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 283.71it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 401.45it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 304.68it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 388.98it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 333.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 451.56it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 425.48it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 424.08it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 422.38it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:negative_one_length_too_small] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3551.49it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 387.45it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 539.85it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 297.83it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 418.55it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 317.78it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 403.85it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 345.23it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 467.45it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 440.12it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 437.55it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 435.39it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_one_length_too_small_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3795.75it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 394.87it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 561.36it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 309.92it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 439.02it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 330.73it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 425.48it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 361.55it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 485.85it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 456.58it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 454.98it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 453.08it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_passes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 204.14it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 154.86it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 228.49it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 186.72it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 248.75it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 220.07it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 276.04it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 254.94it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 321.13it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 311.39it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 310.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 309.03it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_fails] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 566.87it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 301.65it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 437.89it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 305.06it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 361.58it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 304.82it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 372.58it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 335.83it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 398.36it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 383.66it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 382.50it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 381.14it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_parser_errors] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3552.99it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 357.21it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 512.29it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 279.02it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 343.22it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 267.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 387.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 383.64it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 381.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3394.82it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 332.88it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 475.35it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 264.36it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 374.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 260.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 390.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 363.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 360.46it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 357.70it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_timedelta_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4082.05it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 354.19it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 500.77it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 266.67it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 364.94it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 278.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 406.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 404.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 401.98it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_timedelta_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3412.78it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 330.42it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 469.70it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 254.80it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 353.31it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 274.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 428.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 397.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 396.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 393.84it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_datetime_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3615.78it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 357.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 506.15it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 281.40it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 386.66it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 298.65it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 469.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 436.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 434.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 433.03it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_datetime_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3272.96it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 350.07it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 492.44it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 270.29it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 377.73it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 286.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 441.93it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 408.30it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 406.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 404.94it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3485.09it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 473.37it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 665.94it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 372.77it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 512.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 398.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 616.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 565.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 561.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 557.85it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:positive_test_with_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3509.88it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 458.62it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 641.46it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 361.06it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 493.20it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 385.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 605.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 565.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 562.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 559.63it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_integers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3773.55it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 479.84it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 674.94it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 371.33it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 505.56it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 385.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 567.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 529.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 524.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 520.59it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_string_only] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3992.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 489.36it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 689.97it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 388.15it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 499.66it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 387.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 581.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 541.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 535.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 528.99it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_null_only] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3756.65it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 483.08it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 682.26it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 384.56it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 535.94it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 412.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 626.21it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 583.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 580.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 576.76it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps_tz_informed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3788.89it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 368.94it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 526.35it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 292.27it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 402.16it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 306.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 444.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 441.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps_tz_informed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3738.24it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 361.66it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 513.69it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 279.04it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 390.68it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 298.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 474.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 438.34it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 435.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 432.79it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3389.34it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 875.64it/s] Calculating Metrics:  50%|█████     | 3/6 [00:00<00:00, 1168.76it/s]Calculating Metrics:  50%|█████     | 3/6 [00:00<00:00, 724.66it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 813.01it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 642.98it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 753.22it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 692.05it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 683.78it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 673.03it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_all_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3617.34it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 600.26it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 815.01it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 431.29it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 485.62it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 326.64it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 537.75it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 499.56it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 496.16it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 492.74it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:positive_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3533.53it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 606.20it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 827.99it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 472.44it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 562.48it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 428.76it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 681.47it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 630.60it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 623.48it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 615.52it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_no_mostly_one_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3690.54it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 614.10it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 834.74it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 477.64it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 571.76it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 431.18it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 687.59it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 636.45it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 629.59it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 621.99it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3823.43it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 612.75it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 846.99it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 472.95it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 564.07it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 393.57it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 610.91it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 567.17it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 561.80it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 555.13it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:positive_case_with_mostly_and_no_unexpected_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3890.82it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 605.15it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 832.86it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 476.41it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 569.24it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 429.36it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 675.49it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 621.46it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 615.67it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 609.76it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_case_with_75percent_null_values_no_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3220.20it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 583.56it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 808.41it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 472.81it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 567.20it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 429.55it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 678.29it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 626.46it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 619.04it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 608.12it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3135.93it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 335.58it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 476.88it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 280.17it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 370.40it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 296.05it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.30it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 449.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 443.56it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_multiple_regexes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3711.77it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 379.16it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 520.32it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 289.97it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 379.49it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 299.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 488.28it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 454.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 451.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 449.06it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3514.29it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 394.80it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 548.16it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 261.53it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 348.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 279.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 453.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 425.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 424.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 422.24it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:negative_test_with_more_string-ish_strings] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4056.39it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 413.48it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 573.04it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 302.79it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 392.00it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 305.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 450.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 448.05it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 445.93it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_match_on__any] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3867.50it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 411.11it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 582.65it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 315.26it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 389.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 301.42it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 485.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 452.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 449.08it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.51it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_column_name_has_space_and_match_on__any] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3658.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 409.86it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 578.18it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 313.26it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 401.51it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 311.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 475.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 443.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 440.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 438.08it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_successful_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3401.71it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 286.16it/s] Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 410.56it/s]Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 228.05it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 397.19it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 299.31it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 367.36it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 307.86it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 332.36it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 293.60it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 382.14it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 361.22it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 360.12it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 358.53it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_unsuccessful_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3442.19it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 303.77it/s] Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 435.47it/s]Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 236.56it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 418.64it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 296.53it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 361.29it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 299.26it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 319.76it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 283.38it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 365.35it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 346.58it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 345.14it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 343.71it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_outlier] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3775.25it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 313.35it/s] Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 446.04it/s]Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 239.79it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 423.08it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 316.46it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 387.69it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 323.26it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 346.25it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 306.60it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 394.79it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 371.68it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 369.92it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 367.88it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_mostly_zero] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3533.53it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 313.09it/s] Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 437.94it/s]Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 218.59it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 384.52it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 291.51it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 357.48it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 303.50it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 325.24it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 283.01it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 363.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 344.70it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 343.06it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 341.39it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3951.30it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 315.56it/s] Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 451.19it/s]Calculating Metrics:  23%|██▎       | 3/13 [00:00<00:00, 242.75it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 424.00it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 319.03it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 389.81it/s]Calculating Metrics:  62%|██████▏   | 8/13 [00:00<00:00, 326.36it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 349.27it/s]Calculating Metrics:  69%|██████▉   | 9/13 [00:00<00:00, 302.56it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 384.22it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 362.41it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 360.93it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 359.17it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3521.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 367.33it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 522.39it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 286.67it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 387.39it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 289.94it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 443.76it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 411.54it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 409.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 406.59it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2680.92it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 263.09it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 365.68it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 174.82it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 245.09it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 198.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 319.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 298.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 297.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 295.74it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3272.96it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 355.81it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 506.66it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 282.64it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 386.10it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 296.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 461.85it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 427.82it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 426.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 423.98it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_min_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3744.91it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 352.36it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 500.33it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 272.92it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 388.74it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 294.28it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 453.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 414.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 412.78it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_min_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2848.42it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 330.35it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 469.69it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 264.45it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 377.73it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 288.42it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 453.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 419.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.90it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 416.04it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_max_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3968.12it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 355.37it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 501.85it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 269.88it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 386.34it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 292.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 455.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 419.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 415.56it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_max_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3936.47it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 347.58it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 493.99it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 270.51it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 384.53it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 291.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 453.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 419.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 416.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 414.40it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3052.62it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 358.93it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 511.60it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 284.90it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 399.40it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 304.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 469.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 428.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 424.37it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 421.83it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3951.30it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 363.76it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 519.03it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 284.90it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 391.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 300.90it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 463.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 426.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 423.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 420.12it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3985.09it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 347.40it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 496.35it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 281.56it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 381.30it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 288.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 425.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 383.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 381.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 377.73it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4042.70it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 678.47it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 936.09it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 520.84it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 637.68it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 527.49it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 665.54it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 614.47it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 608.27it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 602.57it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 3179.91it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 508.65it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 695.88it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 376.51it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 482.90it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 416.42it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 540.58it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 500.83it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 496.85it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 492.93it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4007.94it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 676.39it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 933.10it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 548.25it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 680.19it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 556.05it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 704.99it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 649.34it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 644.51it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 638.57it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 3464.94it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 635.50it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 857.61it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 517.16it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 644.90it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 527.81it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 671.38it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 620.55it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 616.02it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 607.47it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4104.02it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 378.00it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 534.08it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 284.47it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 389.38it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 297.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 465.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 431.02it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 428.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 426.29it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4124.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 372.03it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 528.74it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 281.11it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 390.84it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 298.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 461.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 428.67it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 427.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 424.63it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4007.94it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 357.85it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 508.40it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 276.55it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 385.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 295.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 455.94it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 424.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 422.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 419.65it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3883.61it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 323.46it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 456.83it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 264.34it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 370.72it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 288.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 450.08it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 415.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 413.09it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2776.77it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 242.12it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 347.10it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 221.17it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 114.56it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 90.45it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 74.79it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 97.59it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 88.08it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 108.29it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 99.50it/s] Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 98.77it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 98.46it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3938.31it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 376.86it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 538.21it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 290.95it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 173.10it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 122.71it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 91.34it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 118.25it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 104.43it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 128.07it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 116.05it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 115.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 114.60it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3350.08it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 348.73it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 495.86it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 269.15it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 164.47it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 121.23it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 95.93it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 123.86it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 108.74it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 133.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 119.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 118.77it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 118.43it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4046.60it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 375.72it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 536.56it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.94it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 412.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 314.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 483.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 443.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 436.43it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3682.44it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 374.12it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 533.72it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 288.57it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 409.87it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 312.27it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 481.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 438.94it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 435.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 431.56it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4114.08it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 363.03it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 518.28it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 287.46it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 166.07it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 113.73it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 89.16it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 115.83it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 102.27it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 125.33it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 113.61it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 112.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 112.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3711.77it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 361.73it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 513.88it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 281.67it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 175.05it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 128.49it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 101.29it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 131.39it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 114.82it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 140.65it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 126.00it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 124.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 124.57it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4056.39it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 402.16it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 572.84it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 317.73it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 450.82it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 342.94it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 525.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 487.42it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 485.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 483.21it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3905.31it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 398.62it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 564.43it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 312.62it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 441.11it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 336.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 504.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 468.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 466.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 464.40it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3958.76it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 372.36it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 532.75it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 410.84it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 312.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 484.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 448.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.56it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 444.58it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3846.22it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 375.67it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 537.55it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 295.66it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 414.05it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 311.63it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 483.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 447.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 445.85it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 443.91it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4032.98it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 377.42it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 539.76it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 294.49it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 416.46it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 316.93it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 483.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 448.27it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 444.46it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3975.64it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 377.51it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 540.06it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 294.61it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 415.90it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 314.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 490.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 454.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 452.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 450.37it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_passes0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 477.87it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 252.24it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 367.51it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 257.88it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 322.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 272.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 389.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 370.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 369.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 368.07it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_fails0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 674.05it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 296.32it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 428.75it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 287.85it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 352.46it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 293.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 412.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 391.76it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 390.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 389.03it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_parser_errors0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4025.24it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 444.34it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 628.14it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 348.15it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 469.05it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 360.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 566.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 526.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 524.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 521.82it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value_summary_output] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4317.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.52it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 636.66it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 353.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 487.85it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 372.66it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 580.34it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 537.28it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 534.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 531.52it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_exact_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4299.65it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 453.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 643.63it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 355.62it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 498.55it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 380.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 595.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 552.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 549.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.80it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_column_name_has_space] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4165.15it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 449.02it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 636.92it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 352.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 483.93it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 371.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 574.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 533.76it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 531.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 528.62it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4114.08it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.52it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 636.50it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 352.64it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 493.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 375.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 587.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 545.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 539.84it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_one_missing_value_and_insufficent_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3869.28it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 417.39it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 591.39it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 338.87it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 474.52it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 366.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 566.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 523.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 520.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 516.82it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_exact_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3869.28it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 398.66it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 551.88it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 308.13it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 433.69it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 340.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 545.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 508.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 506.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 504.21it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_sufficent_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4175.51it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 289.06it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 400.74it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 222.01it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 319.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 265.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 421.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 419.94it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 418.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4106.02it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 416.41it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 576.70it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 298.45it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 391.45it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 306.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 499.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 468.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 466.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 464.68it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4056.39it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 421.67it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 593.59it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 338.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 454.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 345.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 521.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 484.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 481.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 479.32it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_empty_regex] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4056.39it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 443.75it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 628.27it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 349.97it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 484.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 372.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 552.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 509.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 506.58it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_more_complicated_regex] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4048.56it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 442.76it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 620.09it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 346.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 449.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 347.56it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 553.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.30it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 513.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 510.42it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_match_characters_not_at_the_beginning_of_string] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3975.64it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 436.88it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 615.87it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 347.55it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 479.57it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 367.21it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 569.51it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 528.21it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 525.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 522.90it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3773.55it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 373.84it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 523.92it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 287.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 393.49it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 301.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 466.48it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 432.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 430.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 429.04it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4009.85it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 375.61it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 535.92it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 408.14it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 310.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 485.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 449.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 447.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 445.38it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4000.29it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 354.61it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 504.37it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 282.99it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 378.49it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 292.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 459.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 415.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 413.22it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_min_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3936.47it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 352.30it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 503.26it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 267.98it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 383.20it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 280.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 422.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 375.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 373.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 371.57it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_min_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3983.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 350.18it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 499.84it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 272.38it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 374.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 274.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 416.18it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 387.34it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 385.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 384.51it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_max_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3929.09it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 351.93it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 503.36it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 252.04it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 358.42it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 268.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 415.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 386.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 384.48it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 382.95it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_max_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3912.60it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 266.77it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 374.54it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 213.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 311.74it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 248.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 404.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 377.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 376.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 375.19it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2677.50it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 323.05it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 454.88it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 244.88it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 351.29it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 276.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 409.18it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 407.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 406.01it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3100.00it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 306.69it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 438.08it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 243.31it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 346.38it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 274.51it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 409.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 408.46it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 406.85it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3794.03it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 327.97it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 467.28it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 272.10it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 374.98it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 291.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 456.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 425.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 423.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 421.74it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 2589.88it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 606.42it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 838.92it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 393.13it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 447.50it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 343.43it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 445.01it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 418.83it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 416.39it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 413.81it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4090.01it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 678.91it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 935.46it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 538.98it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 663.13it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 545.20it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 692.24it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 638.97it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 634.47it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 628.87it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 3326.17it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 457.24it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 629.68it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 351.36it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 440.61it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 384.55it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 502.11it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 470.93it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 467.79it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 464.58it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 3968.12it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 554.03it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 765.90it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 485.06it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 613.88it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 511.94it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 653.67it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 606.01it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 601.95it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 597.02it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4058.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 374.61it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 535.53it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 288.74it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 404.64it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 307.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 476.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 441.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 437.95it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4000.29it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 374.94it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 535.60it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 294.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 411.97it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 314.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 485.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 448.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 447.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 445.09it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3878.23it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 372.46it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 531.46it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.21it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 406.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 309.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 477.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.80it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 437.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 435.74it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3936.47it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 362.66it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 515.82it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 287.71it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 403.59it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 307.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 474.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 439.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 438.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 436.11it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3983.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 373.82it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 532.18it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.99it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 175.60it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 119.64it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 89.97it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 116.60it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 103.40it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 126.86it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 115.15it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 114.31it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 114.04it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3809.54it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 240.87it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 338.41it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 199.44it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 136.92it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 104.94it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 84.94it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 110.23it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 98.23it/s] Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 120.61it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 109.86it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 109.01it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 108.74it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3992.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 377.15it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 538.12it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 293.86it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 178.31it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 128.35it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 94.86it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 121.06it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 104.83it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 128.19it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 116.13it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 115.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 114.96it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3629.86it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 198.75it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 280.06it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 158.40it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 235.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 192.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 311.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 291.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 289.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 288.58it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3246.37it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 289.81it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 407.99it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 227.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 314.39it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 237.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 348.32it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 302.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 300.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 298.87it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3266.59it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 296.38it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 418.69it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 181.76it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 118.30it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 91.88it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 76.40it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 99.55it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 89.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 110.45it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 101.43it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 100.72it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 100.49it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4038.81it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 373.74it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 534.17it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 292.37it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 174.35it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 125.59it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 95.18it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 122.82it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 106.38it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 128.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 114.05it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 113.08it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 112.79it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3862.16it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 404.29it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 573.83it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 316.92it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 424.80it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 308.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 458.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 427.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 425.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 424.04it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3934.62it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 399.76it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 566.54it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 314.96it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 443.42it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 310.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 458.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 421.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 418.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 416.18it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3869.28it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 364.52it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 517.52it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 286.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 381.19it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 288.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 429.52it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 400.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 399.32it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 397.76it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3658.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 360.51it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 513.02it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 268.22it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 373.98it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 288.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 434.20it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 404.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 403.26it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 401.66it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3165.51it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 215.52it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 302.18it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 161.58it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 234.17it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 188.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 303.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 282.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 281.54it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 280.45it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3315.66it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 303.40it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 433.28it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 233.97it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 328.49it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 249.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 387.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 359.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 357.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 356.30it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_passes1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 545.53it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 245.07it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 355.58it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 237.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 282.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 234.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 316.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 300.26it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 299.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 298.02it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_fails1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 734.75it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 314.38it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 456.91it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 301.45it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 366.79it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 301.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 384.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 363.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 361.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 360.27it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_parser_errors1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:basic_positive_test_case_single_value_not_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3992.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 418.78it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 594.91it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 330.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 426.55it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 288.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 452.51it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 417.52it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 415.54it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 413.22it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_case_include_one_existing_column_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4148.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 423.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 602.51it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 332.56it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 461.94it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 351.26it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 552.18it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 512.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 510.02it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 507.36it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_empty_values_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4185.93it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 423.65it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 600.47it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 333.75it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 449.93it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 347.90it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 553.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 513.59it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 508.75it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:basic_negative_strings_set_all_character_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4082.05it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 413.72it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 589.39it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 326.34it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 464.03it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 352.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 547.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 507.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 505.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 502.97it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_strings_set_extra_value_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4064.25it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 427.42it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 608.25it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 335.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 475.42it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 362.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 574.54it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 531.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 529.63it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 526.98it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3710.13it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 350.26it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 498.93it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 289.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 416.66it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 315.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 501.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 465.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 464.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 461.97it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly_summary_output] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3252.66it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 352.12it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 500.59it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 286.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 411.76it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 316.56it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 501.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 465.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 463.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 461.04it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_float_set_two_out_of_three_column_values_included_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3855.06it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 369.64it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 524.14it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.43it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 417.93it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 321.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 510.65it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 473.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 470.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 468.50it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_values_set_is_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3907.13it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 376.46it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 531.73it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 290.51it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 414.91it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 318.05it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 495.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 452.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 450.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 447.75it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:basic_python_int_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2545.09it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1757.88it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1501.72it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1285.41it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_test_python_ints_are_not_string] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2584.29it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1788.62it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1529.09it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1307.45it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_test_pandas_floats] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2122.62it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1353.00it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1107.55it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 912.40it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_test_pandas_strings] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3520.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 399.76it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 569.36it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 330.72it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 450.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 351.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 555.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 512.98it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 509.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 505.10it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_test_python_floats_are_not_python_bools] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3116.12it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2128.01it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1824.40it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1562.71it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3289.65it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2257.43it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1926.64it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1641.61it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics_object_underscore] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3415.56it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2336.66it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1992.54it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1692.62it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics_big_o] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3344.74it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2278.27it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1916.08it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1628.86it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_pandas_datetime_no_timezone] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3545.48it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2403.61it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2037.06it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1733.18it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_pandas_datetime_with_timezone] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3460.65it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2364.32it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2016.49it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1715.46it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_pandas_datetime_with_timezone] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3498.17it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2380.42it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2024.28it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1723.92it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_pandas_datetime_expected_int] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3498.17it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2387.20it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2028.19it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1721.09it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_number_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3688.92it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 412.12it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 587.41it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 325.83it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 462.61it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 352.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 557.66it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 513.42it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 510.77it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:vacuously_true_empty_value_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3823.43it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 339.96it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 484.50it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 284.82it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 417.19it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 320.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 517.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 479.64it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 477.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 475.56it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_case_exclude_existing_column_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3992.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 400.39it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 566.57it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 311.50it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 444.89it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 342.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 544.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 505.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 503.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 501.43it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_empty_values_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3371.63it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 313.03it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 442.02it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 246.55it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 349.92it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 271.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 426.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 397.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 396.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 394.15it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_strings_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2746.76it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 254.84it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 364.30it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 221.34it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 320.51it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 249.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 405.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 375.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 373.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 371.98it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_strings_set_extra_value_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3338.09it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 337.72it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 481.46it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 280.53it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 407.70it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 318.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 507.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 473.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 471.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 469.60it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_numbers_set_no_matching_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3846.22it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 399.36it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 564.46it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 320.00it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 457.83it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 351.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 554.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 508.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 506.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:positive_test_float_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3905.31it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 372.45it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 525.40it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 291.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 417.23it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 319.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 509.76it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 472.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 470.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 468.08it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_float_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3945.72it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 368.13it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 522.55it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 259.22it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 376.85it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 295.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 478.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 445.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 444.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 442.15it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_passes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 756.75it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 355.51it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 514.32it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 335.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 390.76it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 326.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 454.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 433.09it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 431.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 429.61it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_fails] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 896.12it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 384.62it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 554.73it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 364.70it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 447.03it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 369.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 489.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 464.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 462.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 459.96it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_parser_errors] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_empty_column_should_be_vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3960.63it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 415.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 592.30it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 327.48it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 470.50it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 357.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 572.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 528.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 526.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 523.97it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_datetime_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2861.05it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 396.34it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 566.13it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 318.37it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 446.35it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 342.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 537.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 498.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 496.90it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.46it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_negative_test_case_datetime_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3890.82it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 374.47it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 531.55it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 309.15it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 437.30it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 338.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 532.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 492.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 490.41it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3120.76it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 392.39it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 558.15it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 322.73it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 407.84it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 320.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.82it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 481.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 479.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 476.85it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:test_empty_column_should_be_vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4048.56it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 402.99it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 569.39it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 320.54it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 434.67it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 338.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 540.08it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 497.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 495.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 492.76it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3830.41it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 442.58it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 628.55it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 350.47it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 479.89it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 369.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 580.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 538.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 536.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 533.25it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_exact_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3876.44it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 432.34it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 610.49it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 344.28it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 478.88it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 368.65it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 581.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 539.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 537.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 534.36it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3563.55it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 406.09it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 554.19it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 308.06it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 414.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 327.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 526.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 491.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 489.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 487.11it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_one_missing_value_and_insufficent_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3958.76it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 449.02it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 635.28it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 334.51it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 459.89it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 352.21it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 547.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 510.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 507.74it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 505.28it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_one_missing_value_no_exceptions] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4108.04it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 449.45it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 636.14it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 353.66it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 488.28it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 354.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 537.18it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 499.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 495.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 492.30it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4048.56it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 445.54it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 624.21it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 348.96it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 488.38it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 374.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 583.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 541.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 539.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 536.60it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4236.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 425.62it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 604.86it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 343.68it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 485.25it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 373.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 590.08it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 544.28it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 541.40it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_empty_regex] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4068.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.47it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 635.63it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 353.62it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 494.13it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 378.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 585.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 543.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 540.98it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 538.16it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3992.67it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 433.18it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 610.76it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 345.43it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 482.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 367.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 576.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 534.62it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 532.26it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 529.02it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3623.59it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 463.41it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 650.65it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 368.87it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 489.05it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 377.59it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 597.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 558.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 555.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 552.82it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test_with_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4175.51it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 490.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 691.56it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 387.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 530.33it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 402.48it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 612.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 553.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 550.27it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.99it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4106.02it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 493.71it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 695.57it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 387.19it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 520.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 403.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 626.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 583.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 580.32it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 576.97it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:test_raising_exception_for_wrong_input_data_type] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4173.44it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 493.56it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 697.50it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 391.95it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 220.38it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 160.34it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 126.63it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 163.58it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 144.59it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 176.31it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 159.83it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 158.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 157.86it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3943.87it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 411.11it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 582.08it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 332.59it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 437.06it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 340.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 547.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 509.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 507.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 504.85it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:positive_test_with_multiple_regexes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4138.44it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 425.69it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 603.61it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 339.89it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 443.85it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 346.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 554.82it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 516.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 513.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.34it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3705.22it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 397.00it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 559.61it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 316.30it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 416.71it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 326.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 529.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 492.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 490.97it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 488.62it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:2nd_basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3655.17it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 398.96it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 561.99it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 308.48it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 399.08it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 315.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 508.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 475.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 473.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 471.01it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_parse_strings_as_datetimes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4058.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 432.83it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 615.15it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 336.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 404.66it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 318.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 516.34it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 481.76it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 479.85it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 477.60it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_interspersed_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4007.94it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 428.27it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 608.63it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 337.95it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 449.19it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 348.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 558.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 518.05it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 513.27it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3039.35it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 255.85it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 366.12it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 197.50it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 285.05it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 183.09it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 228.79it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 197.89it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 279.30it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 266.14it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 265.62it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 264.99it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_min_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 4100.00it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 314.43it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 451.32it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 243.31it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 357.04it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 261.15it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 338.10it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 282.08it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 359.18it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 333.30it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 332.06it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 330.92it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_max_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3907.13it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 239.47it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 343.02it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 198.58it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 296.09it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 224.68it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 293.11it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 247.72it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 342.70it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 322.63it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 321.84it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 320.91it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_missing_value_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 4046.60it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 332.12it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 477.86it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 252.50it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 360.62it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 265.20it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 338.11it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 284.09it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 389.70it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 365.61it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 364.58it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 363.42it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_values_are_integers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 4023.31it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 329.82it/s] Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 474.52it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 256.58it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 376.41it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 276.29it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 354.45it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 297.11it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 407.29it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 380.82it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 379.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 378.28it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_passes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 794.23it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 299.66it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 435.59it/s]Calculating Metrics:  27%|██▋       | 3/11 [00:00<00:00, 275.48it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 360.34it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 284.85it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 354.14it/s]Calculating Metrics:  64%|██████▎   | 7/11 [00:00<00:00, 307.65it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 389.62it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 369.63it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 368.46it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 367.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_parser_errors] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:simple_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3738.24it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 427.99it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 603.50it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 337.87it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 454.72it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 353.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 558.44it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 520.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 518.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.63it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_wrong_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4092.00it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 441.69it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 626.33it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 340.64it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 474.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 360.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 559.88it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 520.54it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 518.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.65it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4108.04it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 453.02it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 641.89it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 355.25it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 498.86it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 380.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 579.21it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 535.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 532.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 529.00it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4158.95it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.42it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 635.34it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 352.24it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 490.06it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 375.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 590.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 547.59it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 545.08it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.18it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:simple_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4194.30it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 451.49it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 640.74it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 354.78it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 499.25it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 382.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 593.61it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 550.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 547.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 544.96it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_out_of_bounds_value_for_month] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 4138.44it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 450.32it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 638.95it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 354.27it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 497.51it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 379.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 592.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 549.14it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.56it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 543.62it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_iso8601] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3802.63it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 441.69it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 626.17it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 350.47it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 495.38it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 378.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 592.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 549.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 544.10it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_input_data_type] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3898.05it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 418.57it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 589.03it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 332.12it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 194.82it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 142.68it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 113.07it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 146.58it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 129.44it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 158.50it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 143.80it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 142.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 142.38it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3943.87it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 481.83it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 680.89it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 380.18it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 466.16it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 368.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 580.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 539.87it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 536.69it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_multiple_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3225.15it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 347.57it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 486.05it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 271.03it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 348.11it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 239.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 391.28it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 373.34it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 371.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 370.53it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_all_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2752.17it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 326.91it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 457.26it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 238.32it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 340.21it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 283.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 471.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 446.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 444.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 442.80it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3509.88it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 417.30it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 590.33it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 328.95it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 34.16it/s] Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 34.16it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 34.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 34.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 34.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 34.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 63.16it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:positive_test_with_a_more_complex_schema] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2770.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 289.35it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 407.45it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 234.39it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 212.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 179.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 307.63it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 291.08it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 290.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 289.05it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3929.09it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 869.92it/s] Calculating Metrics:  50%|█████     | 3/6 [00:00<00:00, 1167.79it/s]Calculating Metrics:  50%|█████     | 3/6 [00:00<00:00, 731.52it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 842.27it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 668.79it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 833.55it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 768.63it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 760.92it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 746.45it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:positive_case_with_mostly_and_no_unexpected_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3710.13it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 554.18it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 762.00it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 445.70it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 540.10it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 416.63it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 671.55it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 622.14it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 618.14it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 613.49it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_pandas_integer_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2359.00it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1712.66it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1503.33it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1315.65it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_pandas_float_values_are_not_strings] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2987.40it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2087.76it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1795.51it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1538.63it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_float_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2666.44it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1779.51it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1515.28it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1294.14it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_string_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 1754.57it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 268.20it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 381.64it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 227.33it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 320.96it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 249.63it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 398.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 371.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 370.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 367.23it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_boolean_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2538.92it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1733.18it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1475.31it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1256.53it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_string_and_int_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3310.42it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 328.30it/s] Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 463.75it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 267.12it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 378.76it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 283.32it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 441.97it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 402.97it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 400.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 397.19it/s]
_ test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_placeholder_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2668.13it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1835.58it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1569.72it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1338.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_string_one_character_length] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 2209.85it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 266.92it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 444.55it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 271.37it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 358.98it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 276.28it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 346.20it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 293.20it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 379.27it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 349.94it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 359.31it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 338.80it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 337.74it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 336.69it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:negative_test_string_value_is_1_too_high] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 2669.83it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 281.25it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 488.99it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 290.95it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 397.38it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 302.42it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 382.03it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 319.23it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 454.07it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 419.07it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 435.93it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 412.90it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 411.90it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 410.72it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_with_missing_value_in_column_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3190.80it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 300.66it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 512.44it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 279.95it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 380.15it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 287.14it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 360.38it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 304.28it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 418.25it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 385.92it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 397.32it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 377.97it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 377.14it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 376.16it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:negative_one_length_too_small] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 2309.64it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 256.61it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 438.60it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 272.57it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 374.30it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 288.03it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 364.27it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 308.06it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 424.57it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 396.13it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 408.49it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 387.92it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 386.94it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 385.88it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_one_length_too_small_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3105.74it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 299.32it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 514.21it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 300.97it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 399.81it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 296.37it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 371.56it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 297.63it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 396.02it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 371.06it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 385.66it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 361.15it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 359.87it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 358.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2474.52it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 207.08it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 354.48it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 157.54it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 216.83it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 161.08it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 242.07it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 219.88it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 244.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 231.49it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 231.00it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 230.46it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 1579.48it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 119.64it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 216.84it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 144.57it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 202.06it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 161.07it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 256.09it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 234.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 259.87it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 235.81it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 234.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 234.10it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_timedelta_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 1941.36it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 128.13it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 223.84it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 147.83it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 208.22it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 155.92it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 255.10it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 233.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 261.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 246.40it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 245.72it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 244.81it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_timedelta_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2510.06it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 204.44it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 360.89it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 207.18it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 281.85it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 200.84it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 314.35it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 279.27it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 309.14it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 289.71it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 288.95it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 288.14it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_datetime_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2563.76it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 228.55it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 398.05it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 223.40it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 304.37it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 222.64it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 334.58it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 299.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 329.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 308.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 307.15it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 306.22it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_datetime_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2577.94it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 214.14it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 375.45it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 208.10it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 290.68it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 208.81it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 326.51it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 284.53it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 316.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 296.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 296.24it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 295.37it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps_tz_informed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2652.10it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 220.65it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 378.39it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 217.31it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 297.70it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 225.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 342.87it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 297.27it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 325.93it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 305.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 304.40it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 303.49it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps_tz_informed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2688.66it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 227.82it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 391.71it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 221.01it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 301.34it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 223.48it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 350.37it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 313.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 340.24it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 308.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 307.10it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 306.07it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2252.58it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 475.98it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 701.51it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 478.12it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 553.70it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 443.03it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 525.33it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 474.19it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 480.05it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 452.56it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 449.74it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 446.58it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_all_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2563.76it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 514.80it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 784.31it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 517.74it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 597.22it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 453.72it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 545.85it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 486.01it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 492.94it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 460.22it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 457.06it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 453.67it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:positive_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 1556.33it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 444.83it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 667.88it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 462.79it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 537.22it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 425.64it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 488.72it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 442.72it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 460.43it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 432.15it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 429.44it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 426.46it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_no_mostly_one_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 1614.44it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 329.94it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 492.06it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 324.31it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 380.23it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 320.29it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 407.07it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 372.50it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 388.88it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 369.96it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 368.14it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 366.02it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 1558.64it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 254.45it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 422.21it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 291.23it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 345.61it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 276.55it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 422.24it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 389.93it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 411.64it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 389.91it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 388.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 386.64it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:positive_case_with_mostly_and_no_unexpected_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 1664.08it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 360.69it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 594.35it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 370.64it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 435.73it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 330.44it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 486.72it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 444.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 455.93it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 425.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 422.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 420.28it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_case_with_75percent_null_values_no_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 1938.22it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 372.25it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 604.50it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 380.56it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 448.03it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 342.16it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 494.26it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 449.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 459.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 430.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 428.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 425.87it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_successful_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 3148.88it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 181.97it/s] Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 326.40it/s]Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 180.20it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 294.32it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 212.74it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 282.21it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 224.20it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 251.63it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 218.03it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 232.19it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 206.82it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 215.96it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 197.07it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 207.80it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 190.36it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 200.89it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 187.78it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 222.12it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 212.87it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 217.88it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 210.99it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 210.76it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 210.53it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_unsuccessful_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 2550.50it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 136.37it/s] Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 241.18it/s]Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 116.59it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 194.10it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 141.56it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 188.30it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 147.31it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 165.47it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 137.36it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 146.45it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 126.30it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 126.30it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 126.30it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 126.30it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 126.30it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 121.22it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_outlier] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 2538.16it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 127.52it/s] Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 234.97it/s]Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 114.25it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 188.89it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 143.50it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 192.97it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 150.97it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 172.00it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 144.04it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 153.72it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 139.85it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 146.45it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 135.94it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 135.94it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 135.94it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 135.94it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 135.94it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 156.43it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_mostly_zero] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 2829.21it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 186.19it/s] Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 337.29it/s]Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 181.29it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 297.20it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 218.09it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 291.44it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 238.55it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 273.83it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 236.65it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 251.56it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 223.99it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 233.05it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 211.48it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 221.71it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 203.48it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 214.62it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 201.16it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 241.26it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 231.41it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 238.54it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 228.74it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 228.39it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 228.10it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/21 [00:00<?, ?it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 2744.07it/s]Calculating Metrics:  10%|▉         | 2/21 [00:00<00:00, 170.49it/s] Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 312.14it/s]Calculating Metrics:  19%|█▉        | 4/21 [00:00<00:00, 179.05it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 294.32it/s]Calculating Metrics:  33%|███▎      | 7/21 [00:00<00:00, 213.12it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 282.33it/s]Calculating Metrics:  48%|████▊     | 10/21 [00:00<00:00, 230.75it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 264.68it/s]Calculating Metrics:  57%|█████▋    | 12/21 [00:00<00:00, 224.90it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 238.95it/s]Calculating Metrics:  62%|██████▏   | 13/21 [00:00<00:00, 208.70it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 217.63it/s]Calculating Metrics:  67%|██████▋   | 14/21 [00:00<00:00, 198.35it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 209.07it/s]Calculating Metrics:  71%|███████▏  | 15/21 [00:00<00:00, 193.83it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 204.58it/s]Calculating Metrics:  76%|███████▌  | 16/21 [00:00<00:00, 190.56it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 228.12it/s]Calculating Metrics:  95%|█████████▌| 20/21 [00:00<00:00, 219.21it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 226.00it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 218.95it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 218.74it/s]Calculating Metrics: 100%|██████████| 21/21 [00:00<00:00, 218.51it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2957.90it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 290.56it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 465.71it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 261.38it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 344.23it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 256.39it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 396.82it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 357.32it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 393.27it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 370.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 369.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 368.37it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2652.94it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 238.25it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 397.82it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 224.95it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 312.89it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 245.13it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 390.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 350.51it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 386.08it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 362.45it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 361.42it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 360.35it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3086.32it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 291.93it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 494.19it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 261.37it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 356.71it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 269.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 415.15it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 375.72it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 415.16it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 389.92it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 388.97it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 387.84it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_min_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2976.79it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 264.87it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 453.21it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 260.72it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 365.08it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 273.27it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 421.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 378.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 417.97it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 390.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 389.28it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 387.27it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_min_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2954.78it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 268.14it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 456.20it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 259.07it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 348.39it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 257.77it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 406.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 365.42it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 403.15it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 377.54it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 376.59it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 375.52it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_max_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2920.82it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 239.99it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 415.98it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 244.88it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 343.79it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 263.55it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 407.50it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 366.53it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 405.13it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 377.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 376.55it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 375.42it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_max_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3043.76it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 263.05it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 419.77it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 250.99it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 351.91it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 257.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 396.48it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 355.16it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 385.70it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 361.62it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 360.74it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 359.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2162.01it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 193.97it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 339.73it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 220.64it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 309.76it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 243.26it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 390.26it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 353.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 391.02it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 368.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 367.47it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 366.42it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3110.35it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 291.47it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 498.51it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 281.36it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 389.18it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 293.04it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 450.36it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 403.69it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.45it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 414.62it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.12it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 410.92it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2420.95it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 281.85it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 479.61it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 260.55it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 356.10it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 271.12it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 423.06it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 382.02it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 420.81it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 395.05it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 394.08it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 392.94it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3040.45it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 444.92it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 732.05it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 395.77it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 515.69it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 404.18it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 495.42it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 436.99it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.93it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 465.05it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 463.11it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 460.89it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2953.74it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.92it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 726.22it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 442.67it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 592.47it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 462.14it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 554.67it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 471.83it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 521.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.51it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 480.10it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 477.69it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3077.26it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.44it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 721.79it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 426.13it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 568.73it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 447.73it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 550.86it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 481.50it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 524.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 490.97it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 488.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 486.48it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3164.32it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 450.44it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 714.29it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 437.25it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 584.78it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 452.45it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 552.60it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 478.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 536.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 500.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 498.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 495.61it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3140.62it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 284.82it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 481.52it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 277.36it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 383.49it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 286.93it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 451.99it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 405.13it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.70it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 411.81it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 410.42it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2826.35it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 281.62it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 478.02it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 266.33it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 367.79it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 276.77it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 438.36it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 394.57it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 438.41it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 409.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 408.51it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 407.24it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2945.44it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 278.28it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 474.27it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 279.60it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 389.74it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 291.93it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 459.77it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 409.85it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 452.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 421.13it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 419.78it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 418.33it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3163.13it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 289.13it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 493.52it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 287.60it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 399.57it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 295.84it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 462.01it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 412.97it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 450.99it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 404.84it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 402.41it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 400.25it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3110.35it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 291.93it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 494.92it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 274.82it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 379.94it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 281.02it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 430.36it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 387.68it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 427.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 398.95it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 397.65it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 396.37it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2886.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 274.96it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 466.81it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 276.54it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 385.80it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 291.63it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 455.26it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 406.48it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 443.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 414.20it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 412.82it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 411.41it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3169.10it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 296.29it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 485.20it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 284.60it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 395.91it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 297.45it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 464.76it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 414.87it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 450.11it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 415.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 412.17it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3077.26it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 289.93it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 486.61it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 276.38it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 381.27it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 287.43it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 444.70it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 400.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 439.93it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 411.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 410.26it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 408.97it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2907.66it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 293.27it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 496.53it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 286.74it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 396.94it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 295.63it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 463.79it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 414.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 458.88it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 427.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 425.92it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 424.47it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3145.33it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 285.27it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 483.33it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 282.57it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 391.90it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 294.74it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 451.12it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 403.03it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 428.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 399.94it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 398.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 397.47it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3067.13it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 286.12it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 479.27it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 277.08it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 184.26it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 138.85it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 110.85it/s]Calculating Metrics:  38%|███▊      | 5/13 [00:00<00:00, 135.46it/s]Calculating Metrics:  38%|███▊      | 5/13 [00:00<00:00, 116.75it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 137.15it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 121.64it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 137.20it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 123.83it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 122.93it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 122.66it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3059.30it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 294.13it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 513.30it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 292.08it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 403.37it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 297.30it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 452.10it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 405.85it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 446.48it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 417.59it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 416.44it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 415.14it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 1717.92it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 223.43it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 388.79it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 244.75it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 343.66it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 266.84it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 424.02it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 382.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 424.75it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 397.76it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 396.66it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 395.45it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2781.37it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 277.62it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 471.15it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 271.98it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 374.11it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 281.27it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 434.52it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 376.06it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 409.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 383.49it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 382.38it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 381.22it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3087.45it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 292.84it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 493.29it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 282.15it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 390.07it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 292.42it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 460.95it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 412.99it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 458.38it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 428.11it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 426.97it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 425.62it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3120.76it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 293.00it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 502.01it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 288.54it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 400.16it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 298.91it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 456.85it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 404.91it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 437.43it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 407.98it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 406.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 405.45it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2468.69it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 285.32it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 457.93it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 221.51it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 310.40it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 245.11it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 394.82it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 358.79it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 401.58it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 377.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 376.89it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 375.82it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2928.98it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 292.10it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 498.20it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 285.33it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 387.02it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 293.04it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 450.82it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 405.35it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.22it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 416.27it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 415.19it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.89it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_min_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3006.67it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 267.16it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 456.25it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 261.54it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 365.74it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 268.49it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 415.14it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 371.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 410.21it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 383.83it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 382.89it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 381.77it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_min_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2583.49it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 251.38it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 428.95it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 251.92it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 353.13it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 268.17it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 427.35it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 383.45it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 427.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 398.55it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 397.54it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 396.36it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_max_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2836.86it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 269.15it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 465.45it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 269.32it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 375.78it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 281.36it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 437.94it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 391.53it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 424.80it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 395.04it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 393.75it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 392.45it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_max_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3062.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 274.27it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 468.55it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 262.52it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 365.27it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 269.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 423.63it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 377.01it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 419.58it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 390.12it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 389.10it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 387.90it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2897.62it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 285.95it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 488.04it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 280.36it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 389.71it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 289.87it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 454.98it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 406.83it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 444.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 414.15it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.02it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 411.68it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3058.19it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 284.22it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 477.49it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 269.25it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 368.01it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 256.65it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 384.89it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 340.72it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 368.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 342.00it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 340.82it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 339.67it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2478.90it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 258.30it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 448.09it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 265.68it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 364.81it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 278.20it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 440.09it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 395.83it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.35it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 406.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 405.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 404.07it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3120.76it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 451.78it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 745.16it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 451.43it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 382.87it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 157.45it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 201.90it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 190.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 227.03it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 220.01it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 219.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 219.02it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3058.19it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 432.07it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 709.22it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 431.27it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 576.64it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 449.74it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 542.82it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 476.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 535.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 499.48it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 497.22it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.41it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3130.08it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 448.32it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 739.21it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 448.27it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 598.97it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 465.98it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 572.32it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 499.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 560.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 523.80it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 521.59it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 518.94it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2886.65it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 437.93it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 720.33it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 442.52it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 593.24it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 455.19it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 556.79it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 482.89it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 531.66it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 496.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.39it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 491.89it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3150.06it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 296.48it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 509.17it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 291.06it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 404.48it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 301.10it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 470.01it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 419.93it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 465.29it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 433.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 432.17it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 430.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2828.26it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 278.04it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 453.30it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 264.78it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 367.60it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 269.12it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 419.26it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 376.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 416.53it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 388.99it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 387.79it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 386.61it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3057.07it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 279.99it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 469.63it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 273.50it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 380.93it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 286.08it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 449.64it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 401.81it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 446.03it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 415.89it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 414.68it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.30it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3104.59it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 291.03it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 497.38it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 287.65it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 399.79it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 299.48it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 470.06it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 420.28it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 466.18it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.64it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 433.45it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 432.05it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3104.59it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 294.24it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 501.31it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 287.21it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 398.11it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 288.93it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 434.65it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 389.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 425.86it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 399.24it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 398.19it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 396.99it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3081.78it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 236.21it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 406.13it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 248.57it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 347.79it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 269.49it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 429.02it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 386.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 426.49it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 399.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 398.95it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 397.74it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3062.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 292.65it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 500.57it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 287.36it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 398.38it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 297.58it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 466.66it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 413.32it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 457.21it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 426.54it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 425.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 423.99it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3062.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 294.16it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 501.07it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 288.24it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 399.73it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 292.95it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 431.83it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 382.42it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 420.49it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 394.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 393.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 392.17it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2919.81it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 244.92it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 420.52it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 258.98it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 361.16it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 277.05it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 440.48it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 394.99it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 433.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 405.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 404.91it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 403.68it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3140.62it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 284.99it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 485.49it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 279.80it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 389.10it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 290.74it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 444.60it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 399.27it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 438.34it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 404.76it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 403.16it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 401.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3017.48it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 291.38it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 494.32it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 279.68it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 180.15it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 135.28it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 108.79it/s]Calculating Metrics:  38%|███▊      | 5/13 [00:00<00:00, 133.30it/s]Calculating Metrics:  38%|███▊      | 5/13 [00:00<00:00, 115.98it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 136.54it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 121.93it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 137.87it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 125.53it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 124.79it/s]Calculating Metrics:  54%|█████▍    | 7/13 [00:00<00:00, 124.55it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3130.08it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 292.70it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 509.23it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 291.54it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 404.67it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 300.00it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 455.64it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 400.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.78it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 405.92it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 404.59it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 403.33it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3090.87it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 277.39it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 460.41it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 259.35it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 360.71it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 274.95it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 436.11it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 392.80it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 437.55it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 409.24it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 408.18it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 406.92it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3086.32it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 292.37it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 477.45it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 280.59it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 391.29it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 292.97it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 451.06it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 404.86it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.16it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 416.28it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 415.19it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 413.88it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3062.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 293.00it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 491.94it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 283.51it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 392.05it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 275.68it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 433.33it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 389.14it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 426.84it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 397.26it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 395.98it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 394.72it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:basic_positive_test_case_single_value_not_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2954.78it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 302.48it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 490.60it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 292.51it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 402.14it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 308.59it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 472.18it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 427.20it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 470.21it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 442.10it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 440.86it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 439.38it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_case_include_one_existing_column_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3010.99it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 316.60it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 527.70it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 310.56it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 429.98it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 322.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 504.91it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 453.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 500.88it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 468.43it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 466.85it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 465.13it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_empty_values_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3179.91it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 332.83it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 556.02it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 320.92it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 444.71it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 335.14it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 509.03it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 457.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 500.56it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 468.71it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 467.31it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 465.63it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:basic_negative_strings_set_all_character_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3221.43it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 324.47it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 540.03it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 315.61it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 435.35it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 327.98it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 498.10it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 445.51it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 482.65it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 451.03it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 449.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 447.83it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_strings_set_extra_value_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3119.60it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 320.04it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 520.90it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 309.38it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 423.15it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 293.80it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 456.62it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 412.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 457.47it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 429.58it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 428.41it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 426.96it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3003.44it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 288.36it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 484.44it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 285.56it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 396.72it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 300.90it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 461.91it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 415.29it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 456.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 427.31it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 426.12it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 424.74it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_float_set_two_out_of_three_column_values_included_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3101.15it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 305.82it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 518.14it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 299.48it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 415.23it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 311.45it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 485.03it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 429.72it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 472.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 440.32it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 438.99it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 437.46it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_values_set_is_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3020.74it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 292.05it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 492.38it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 287.44it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 399.31it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 298.94it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 454.51it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 403.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 438.75it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 409.55it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 408.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 407.07it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:basic_sqlalchemy_int_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2037.06it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1585.15it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1414.61it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1256.53it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:negative_sqlite_integer_is_not_varchar] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2525.17it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1872.46it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1642.25it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1436.90it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:positive_test_sql_non_postgres_floats] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2247.75it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1483.66it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1329.84it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1180.83it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:positive_test_sql_varchar] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2274.57it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1706.39it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1508.74it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1328.15it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:negative_test_sqlalchemy_floats_are_not_boolean] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2197.12it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1681.08it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1485.76it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1310.31it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_number_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3204.20it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 322.68it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 541.78it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 316.31it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 437.45it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 330.05it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 498.01it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 446.05it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 483.92it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 450.18it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 448.66it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 447.09it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:vacuously_true_empty_value_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2999.14it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 293.73it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 469.32it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 277.70it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 387.27it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 292.83it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 448.87it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 398.98it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.55it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 407.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 406.18it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 404.91it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_case_exclude_existing_column_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3206.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 322.28it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 530.32it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 306.59it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 421.57it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 316.44it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 490.59it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 440.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 481.41it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 450.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 449.07it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 447.54it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_empty_values_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2372.34it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 286.16it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 484.08it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 298.26it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 415.97it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 317.83it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 500.88it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 450.61it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 497.36it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 464.45it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 463.05it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 461.35it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_strings_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3184.74it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 318.67it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 540.10it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 316.48it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 437.70it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 329.89it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 501.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 450.69it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 492.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 460.75it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 459.40it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 457.81it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_strings_set_extra_value_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3184.74it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 322.43it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 539.10it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 312.87it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 431.97it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 323.33it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 493.72it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 439.12it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 475.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 443.58it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 441.91it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 440.27it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_numbers_set_no_matching_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3092.00it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 316.21it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 527.78it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 301.44it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 411.39it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 307.49it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 476.11it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 430.03it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 477.14it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 448.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 446.86it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.39it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:positive_test_float_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2066.16it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 274.69it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 467.84it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 279.68it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 389.79it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 296.74it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 458.10it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 412.34it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 452.46it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 422.69it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 421.48it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 420.13it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_float_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3164.32it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 296.42it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 502.43it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 291.21it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 404.06it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 301.89it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 470.81it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 421.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 461.68it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 431.13it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 429.89it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 428.49it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:test_empty_column_should_be_vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3150.06it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 316.75it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 513.14it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 305.76it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 423.72it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 317.16it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 479.19it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 430.44it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 467.17it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 437.58it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 436.05it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.55it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3150.06it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 306.98it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 525.49it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 300.19it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 411.47it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 307.39it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 467.55it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 417.17it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 454.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 424.53it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 423.26it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 421.46it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:positive_test_with_multiple_like_patternes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3086.32it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 290.36it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 462.79it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 272.85it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 375.35it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 283.57it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 422.78it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 381.82it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 420.07it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 394.98it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 394.00it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 392.86it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:negative_test_with_more_string-ish_strings] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2894.62it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 275.11it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 460.67it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 274.90it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 378.31it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 288.77it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 445.23it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 400.67it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 437.49it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 409.88it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 408.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 407.50it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3038.25it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 286.65it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 485.89it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 281.10it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 382.43it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 286.58it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 435.78it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 391.76it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 424.64it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 391.94it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 390.34it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 388.82it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_insufficient_mostly_and_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2989.53it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 304.61it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 505.06it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 302.36it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 415.26it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 316.15it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 486.30it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 441.66it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 481.55it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 452.16it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 450.50it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 448.88it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_exact_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2543.54it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 323.62it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 533.59it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 323.41it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 445.85it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 333.37it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 517.30it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 466.71it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 506.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 474.65it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 473.03it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 471.30it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_sufficient_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3153.61it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 337.22it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 558.20it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 332.23it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 456.73it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 343.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 526.87it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 472.51it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 516.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 483.11it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 481.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 479.69it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_one_missing_value_and_insufficent_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3189.58it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 341.65it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 562.03it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 332.70it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 456.62it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 346.24it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 526.34it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 468.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 502.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 468.72it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 466.70it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 464.28it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_one_missing_value_no_exceptions] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2836.86it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 302.06it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 500.01it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 281.02it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 375.23it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 282.00it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 440.49it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 400.70it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.60it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 421.65it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 420.40it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 419.06it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_all_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2732.45it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 262.47it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 445.23it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 286.45it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 398.91it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 311.41it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 477.10it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 432.61it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 473.23it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 444.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 442.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_all_missing_values_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3042.66it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 333.87it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 550.42it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 321.33it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 441.11it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 331.43it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 510.86it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 455.61it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 492.59it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 461.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 460.39it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 458.76it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3164.32it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 334.29it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 551.86it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 330.44it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 455.17it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 345.50it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 535.20it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 480.89it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 528.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 495.33it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 493.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 491.94it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:negative_test_insufficient_mostly_and_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3048.19it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 324.89it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 539.22it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 284.35it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 395.15it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 308.13it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 472.63it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 428.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 467.98it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 439.78it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 438.48it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 436.93it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_exact_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2817.81it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 322.64it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 533.12it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 317.86it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 439.75it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 336.04it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 522.61it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 470.69it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 511.69it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 480.20it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 478.70it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 476.96it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_column_name_has_space] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3128.91it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 344.33it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 571.16it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 333.16it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 456.71it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 340.77it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 517.52it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 465.07it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 503.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 472.84it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 471.31it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 469.62it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_sufficient_mostly_w_one_non_matching_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3016.40it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 330.20it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 532.56it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 317.86it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 437.48it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 333.50it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 513.76it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 459.23it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 491.90it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 449.77it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 447.73it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.92it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:negative_test_one_missing_value_and_insufficent_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2937.19it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 327.33it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 513.94it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 276.80it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 378.75it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 295.06it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 456.07it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 416.18it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 457.96it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 432.62it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 431.38it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 429.91it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_one_missing_value_and_exact_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2611.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 243.85it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 418.72it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 273.61it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 381.73it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 297.43it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 470.71it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 426.69it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 464.34it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 437.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 435.79it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.08it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_one_missing_value_and_sufficent_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3044.87it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 328.63it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 534.82it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 317.08it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 436.84it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 331.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 516.57it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 464.53it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 510.27it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 477.61it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 476.10it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 474.30it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_all_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3101.15it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 344.83it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 567.37it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 335.99it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 462.75it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 348.69it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 526.85it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 471.28it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 501.93it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 469.59it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 467.47it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 464.98it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_all_missing_values_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3057.07it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 333.26it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 545.03it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 327.30it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 447.89it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 323.12it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 492.26it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 443.08it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 483.94it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 455.40it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 453.99it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 452.43it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_match_characters_not_at_the_beginning_of_string] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2945.44it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 319.59it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 525.49it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 293.56it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 403.25it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 313.83it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 493.99it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 445.63it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 489.42it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 460.64it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 459.25it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 457.68it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3052.62it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 255.55it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 441.11it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 248.38it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 341.86it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 244.10it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 307.16it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 255.88it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 348.50it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 314.35it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 315.12it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 296.65it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 296.03it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 295.33it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_min_max_too_small] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 2981.03it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 253.10it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 450.76it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 252.07it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 348.96it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 256.76it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 324.24it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 268.28it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 374.03it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 345.99it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 355.47it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 335.09it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 334.30it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 333.45it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_max_min_too_large] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3049.29it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 244.34it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 431.32it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 232.24it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 321.70it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 240.55it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 304.36it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 254.32it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 365.15it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 337.99it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 352.26it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 333.21it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 332.55it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 331.77it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_min_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 2774.01it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 239.01it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 423.23it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 234.30it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 315.38it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 226.53it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 287.37it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 236.50it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 338.73it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 314.45it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 327.28it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 309.63it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 309.01it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 308.32it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_max_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3119.60it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 244.68it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 429.50it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 232.71it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 321.97it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 211.07it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 257.65it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 208.88it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 301.27it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 281.07it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 292.67it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 276.97it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 276.26it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 275.64it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_with_max_lt_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3154.80it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 258.00it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 454.96it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 254.83it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 351.06it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 248.99it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 313.19it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 253.35it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 358.67it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 331.84it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 345.34it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 326.75it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 326.11it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 325.36it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_missing_value_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 3114.97it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 248.54it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 439.61it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 248.12it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 340.52it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 252.38it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 319.58it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 264.80it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 368.37it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 337.07it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 344.15it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 324.31it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 323.54it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 322.75it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_values_are_integers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/14 [00:00<?, ?it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 2383.80it/s]Calculating Metrics:  14%|█▍        | 2/14 [00:00<00:00, 223.21it/s] Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 398.72it/s]Calculating Metrics:  29%|██▊       | 4/14 [00:00<00:00, 236.28it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 328.80it/s]Calculating Metrics:  43%|████▎     | 6/14 [00:00<00:00, 246.22it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 312.07it/s]Calculating Metrics:  57%|█████▋    | 8/14 [00:00<00:00, 259.55it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 363.69it/s]Calculating Metrics:  93%|█████████▎| 13/14 [00:00<00:00, 337.00it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 346.97it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 326.58it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 325.73it/s]Calculating Metrics: 100%|██████████| 14/14 [00:00<00:00, 324.95it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2923.88it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 291.88it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 486.73it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 270.93it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 370.55it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 284.36it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 439.73it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 397.57it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.23it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 409.66it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 408.47it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 407.20it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:negative_test_with_more_string-ish_strings] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3101.15it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 307.65it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 490.92it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 294.12it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 401.96it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 305.41it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 469.20it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 422.83it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 463.19it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 434.13it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 432.51it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 431.05it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3048.19it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 305.15it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 508.52it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 297.68it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 404.89it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 306.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 442.25it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 390.26it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 414.32it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 390.41it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 389.34it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 388.16it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_with_multiple_like_patternes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3062.65it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 295.10it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 486.62it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 276.20it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 172.64it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 139.77it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 230.92it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 215.26it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 239.09it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 226.90it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 226.30it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 225.74it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_with_match_on__any] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 2587.48it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 253.46it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 425.81it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 264.78it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 367.05it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 286.56it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 444.18it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 403.71it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 444.29it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 418.65it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 417.52it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 416.19it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_column_name_has_space_and_match_on__any] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/13 [00:00<?, ?it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 3002.37it/s]Calculating Metrics:  15%|█▌        | 2/13 [00:00<00:00, 322.17it/s] Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 539.15it/s]Calculating Metrics:  31%|███       | 4/13 [00:00<00:00, 313.21it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 431.13it/s]Calculating Metrics:  46%|████▌     | 6/13 [00:00<00:00, 322.70it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 488.84it/s]Calculating Metrics:  85%|████████▍ | 11/13 [00:00<00:00, 439.37it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 477.59it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 447.18it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 445.85it/s]Calculating Metrics: 100%|██████████| 13/13 [00:00<00:00, 444.28it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2777.68it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 389.48it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 612.08it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 365.66it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 494.60it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 385.18it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 517.52it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 474.94it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 482.14it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 454.84it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 453.17it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 451.42it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:basic_negative_case_all_non_unique_character_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 3013.15it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 398.83it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 628.64it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 386.78it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 513.10it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 398.73it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 545.40it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 502.75it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 520.39it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 491.67it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 490.00it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 488.01it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_using_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2114.06it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 381.91it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 635.02it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 387.45it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 522.51it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 400.61it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 536.37it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 476.38it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 471.75it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 426.54it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 423.73it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 420.96it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_case_using_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2849.39it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 383.36it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 603.15it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 367.68it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 493.67it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 352.32it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 492.46it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 442.82it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 460.73it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 437.81it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 436.48it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 434.93it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_multiple_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2949.58it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 400.22it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 663.89it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 333.78it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 422.05it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 305.03it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 441.30it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 413.72it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 431.93it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 410.79it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 409.62it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 408.23it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_case_non_unique_numeric_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2155.35it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 265.61it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 448.53it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 284.84it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 387.80it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 305.51it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 454.49it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 417.76it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 434.31it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 409.47it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 407.89it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 406.28it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_all_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2948.54it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 408.32it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 686.44it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 409.16it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 551.87it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 423.94it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 550.74it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 507.54it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 523.49it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 493.89it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 492.11it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 489.99it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_multiple_duplicate_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/12 [00:00<?, ?it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 2759.41it/s]Calculating Metrics:  17%|█▋        | 2/12 [00:00<00:00, 401.14it/s] Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 677.29it/s]Calculating Metrics:  33%|███▎      | 4/12 [00:00<00:00, 405.56it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 546.95it/s]Calculating Metrics:  50%|█████     | 6/12 [00:00<00:00, 417.36it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 553.49it/s]Calculating Metrics:  92%|█████████▏| 11/12 [00:00<00:00, 508.65it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 525.56it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 492.84it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 490.82it/s]Calculating Metrics: 100%|██████████| 12/12 [00:00<00:00, 488.66it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2098.73it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 611.59it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 917.69it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 619.29it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 715.21it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 566.64it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 680.01it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 607.00it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 624.47it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 586.90it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 583.47it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 579.37it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_no_missing_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3135.93it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 485.11it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 762.36it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 467.48it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 528.72it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 397.05it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 571.11it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 522.32it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 542.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 509.12it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 506.64it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:positive_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3030.57it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 493.33it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 794.75it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 489.89it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 574.25it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 405.87it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 578.63it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 524.26it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 515.33it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 469.37it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 466.70it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 464.40it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2957.90it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 462.11it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 743.37it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 458.14it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 536.60it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 408.07it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 608.76it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 547.77it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 557.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 521.52it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 518.92it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 516.18it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:positive_case_with_mostly_and_no_unexpected_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3100.00it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 485.79it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 776.11it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 475.01it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 558.17it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 422.62it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 613.87it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 557.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 575.21it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 540.13it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 537.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 535.05it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_case_with_75percent_non_null_values_no_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3062.65it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 484.61it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 745.72it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 471.69it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 554.89it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 426.08it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 623.92it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 568.68it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 581.06it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 546.15it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 543.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 540.92it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_sqlalchemy_integer_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2032.12it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1572.08it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1402.31it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1240.55it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_sqlalchemy_float_values_are_not_text] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2119.41it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1612.57it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1426.63it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1253.15it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_float_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1931.08it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1501.72it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1344.33it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1194.96it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_text_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1905.64it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1481.56it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1328.15it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1137.90it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_boolean_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2050.00it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1577.40it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1402.78it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1240.92it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_text_and_integer_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2425.86it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1811.01it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1592.37it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1394.38it/s]
_ test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_placeholder_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2499.59it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1848.53it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1618.17it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1418.43it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4058.35it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1657.17it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2060.75it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1493.34it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1492.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1333.43it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1300.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1262.58it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4495.50it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1745.44it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2149.09it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1546.38it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1584.85it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1408.08it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1370.80it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1328.89it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4337.44it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1711.96it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2118.69it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1528.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1451.32it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1300.76it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1268.50it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1232.62it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3921.74it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1447.06it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1805.04it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1331.53it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1374.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1236.07it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1205.95it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1170.94it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_zero_stdev_exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4175.51it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1683.11it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2087.76it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1507.30it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1508.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1344.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1308.78it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1259.83it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_max_exact_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3985.09it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1526.87it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1839.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1311.27it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1326.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1177.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1146.45it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1111.81it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_min_exact_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3496.71it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1380.39it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1698.79it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1224.02it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1251.56it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1112.62it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1084.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1050.68it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3495.25it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1380.84it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1711.26it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1237.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1269.75it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1131.15it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1101.88it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1068.88it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3179.91it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1266.59it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1552.68it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1141.10it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1114.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 996.75it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 968.77it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 940.32it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_missing_value_in_column_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3623.59it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1406.54it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1734.38it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1242.27it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1240.00it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1105.00it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1076.50it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1044.46it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3711.77it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1301.97it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1633.93it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1136.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 821.69it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 753.29it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 740.45it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 725.97it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:vacuously_true_universal_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4660.34it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1582.46it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1982.81it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1379.25it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1326.26it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1181.33it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1154.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1124.25it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4114.08it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1458.63it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1837.99it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1290.69it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 913.39it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 834.85it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 819.80it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 803.51it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4132.32it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1513.92it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1909.68it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1336.90it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1290.36it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1153.15it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1127.73it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1099.57it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4925.78it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1608.86it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2014.56it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1393.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1348.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1199.66it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1172.00it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1142.16it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_negative_test_no_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4694.24it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1574.73it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1975.03it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1377.59it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1325.42it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1177.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1150.39it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1120.12it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_some_set_intersection_and_extra] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4426.71it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1547.14it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1941.81it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1356.36it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1315.86it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1172.41it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1145.59it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1115.80it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3905.31it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1447.31it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1813.62it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1240.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1185.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1061.31it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1038.13it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1012.87it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4140.48it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1513.92it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1903.33it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1340.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1298.65it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1158.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1131.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1102.89it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4868.61it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1599.96it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2000.14it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1378.80it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1356.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1204.14it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1176.19it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1145.20it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_tie_for_most_common_with_missing_values_and_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4328.49it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1703.62it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2108.04it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1519.68it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1340.35it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1205.95it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1177.10it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1145.12it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__full_value_set__ties_okay__false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4217.50it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1655.54it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2052.01it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1477.04it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1496.50it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1333.75it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1300.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1260.31it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common__ties_okay__true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3881.82it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1526.59it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1870.23it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1374.73it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1382.09it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1241.38it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1209.52it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1150.70it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common_but_test_for_last_value__ties_okay__true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3962.50it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1607.94it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1970.08it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1444.49it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1464.24it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1310.21it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1277.68it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1240.73it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4454.92it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1700.85it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2093.66it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1502.26it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1530.21it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1360.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1325.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1286.99it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4639.72it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1482.61it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1863.58it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1372.48it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1413.41it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1265.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1233.44it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1199.49it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test_string_values_value_set_contains_more_than_actual_mode_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4403.47it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1689.21it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2086.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1497.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1353.22it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1216.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1186.93it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1154.74it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_string_values_value_set_contains_more_than_actual_mode_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4310.69it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1709.52it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2113.00it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1519.12it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1527.42it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1362.45it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1327.21it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1287.88it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_extremes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3883.61it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1414.61it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1765.77it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1213.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 698.96it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 649.27it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 639.59it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 629.35it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_normal_quantiles] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4348.68it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1463.21it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1845.00it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1275.51it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1116.99it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1002.04it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 981.87it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 958.53it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_uneven_spacing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3846.22it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1096.41it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1347.64it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 955.42it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 852.67it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 768.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 754.03it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 737.20it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_normal_quantiles_wrong_distribution] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3442.19it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1177.18it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1481.56it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1027.09it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 886.75it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 794.30it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 777.91it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 759.87it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3604.90it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1561.54it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1957.21it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1435.42it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1496.50it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1337.90it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1304.30it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1267.07it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:basic_negative_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4832.15it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1787.47it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2192.91it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1460.58it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1528.95it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1359.58it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1324.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1283.64it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4293.04it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1665.07it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2056.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1475.66it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1449.31it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1291.55it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1259.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1222.56it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4175.51it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1659.80it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2039.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1420.35it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1435.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1284.04it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1251.94it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1215.48it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:negative_test_case_with_only_a_lower_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3885.41it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1524.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1860.00it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1357.53it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1414.96it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1269.56it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1236.16it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1198.72it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:datetime_except_sqlite] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3985.09it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1551.72it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1913.46it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1402.00it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1417.47it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1272.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1241.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1206.65it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_except_sqlite] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3921.74it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1498.23it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1847.44it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1322.15it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1354.09it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1197.94it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1166.22it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1129.25it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3546.98it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1410.56it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1750.54it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1258.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1205.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1077.33it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1051.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1017.85it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_range] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3760.02it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1497.16it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1828.38it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1311.27it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1307.25it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1160.81it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1130.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1095.26it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 2193.10it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 799.37it/s] Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 984.58it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 698.35it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 735.97it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 684.59it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 664.37it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 642.36it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3496.71it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1378.35it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1700.85it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1223.42it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1256.34it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1117.96it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1088.72it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1056.03it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_exact_match] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3651.98it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1375.86it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1682.66it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1212.69it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1267.93it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1126.82it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1096.19it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1062.45it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3591.01it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1368.01it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1677.95it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1205.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1240.73it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1103.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1074.43it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1038.97it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range_match] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3226.39it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1305.42it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1564.26it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1130.03it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1161.86it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1040.32it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1014.22it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 982.79it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_includes_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 2829.21it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1162.18it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1465.52it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1099.33it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1098.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 987.94it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 963.82it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 936.96it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:vacuously_true_missing_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3690.54it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1412.46it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1731.04it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1237.62it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1279.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1135.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1104.35it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1068.41it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:type_mismatch_null_observed_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3332.78it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1356.72it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1679.51it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1215.98it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 189.79it/s] Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 166.69it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 148.30it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 145.39it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 144.39it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3453.52it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1378.35it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1706.39it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1230.48it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1264.20it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1123.27it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1093.76it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1059.90it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_and_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3983.19it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1487.08it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1827.05it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1304.47it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1336.08it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1184.16it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1152.44it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1117.66it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3377.06it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1347.57it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1666.39it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1202.73it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1257.47it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1125.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1097.34it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1065.83it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3669.56it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1375.41it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1742.06it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1234.59it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1172.33it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1048.51it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1023.75it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 994.26it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3953.16it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1380.16it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1712.43it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1196.55it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1138.67it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 983.77it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 957.39it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 931.55it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4040.76it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1330.68it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1659.36it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1146.82it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1096.48it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 971.58it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 949.04it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 923.55it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 2381.10it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1130.08it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1469.79it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1091.41it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1103.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 999.54it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 979.69it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 954.23it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_negative_test_set_contained] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4583.94it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1517.20it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1772.99it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1058.90it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1054.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 957.60it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 939.16it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 915.74it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_some_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3565.07it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1400.67it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1780.26it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1282.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1257.00it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1126.44it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1102.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1074.70it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4346.43it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1479.21it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1855.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1278.75it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1239.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1094.69it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1068.95it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1040.32it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3958.76it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1350.39it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1704.54it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1190.89it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1175.78it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1053.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1030.92it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1005.53it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4739.33it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1592.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1990.65it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1383.80it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1344.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1197.26it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1170.29it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1139.60it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3130.08it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1296.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1655.65it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1253.78it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1261.92it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1137.67it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1111.81it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1082.33it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:basic_negative_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4122.17it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1677.72it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2081.54it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1508.20it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1582.91it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1408.90it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1372.14it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1330.15it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_result_format_summary] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4660.34it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1776.12it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2179.99it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1555.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1636.64it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1448.68it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1409.38it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1364.67it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4183.84it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1620.67it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2003.65it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1441.51it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1483.13it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1326.26it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1292.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1255.50it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_lower_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4403.47it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1725.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2122.98it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1528.91it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1605.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1424.94it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1386.89it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1344.44it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4337.44it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1717.92it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2118.69it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1516.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1568.55it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1390.80it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1353.55it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1311.85it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 2949.58it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1396.47it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1760.59it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1320.35it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1396.70it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1254.65it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1213.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1172.33it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4158.95it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1677.72it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2063.11it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1494.76it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1535.53it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1368.45it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1332.90it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1293.54it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4879.93it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1756.04it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2149.09it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1540.14it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1594.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1416.99it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1378.80it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1336.94it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_min_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4514.86it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1749.45it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2153.87it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1539.19it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1593.73it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1414.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1376.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1334.17it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_max_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4534.38it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1722.86it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2120.48it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1525.02it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1573.55it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1399.62it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1362.34it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1321.04it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:vacuously_true_null_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4495.50it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1692.28it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2067.52it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1477.21it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1521.05it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1338.86it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1302.98it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1264.30it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_min_equal_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 2516.08it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1186.17it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1499.39it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1074.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1020.70it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 941.43it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 924.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 903.94it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4485.89it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1747.26it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2125.13it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1523.72it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1437.39it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1289.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1257.85it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1222.92it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4843.31it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1795.12it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2204.43it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1574.83it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1405.95it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1261.35it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1230.81it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1196.49it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_min_equal_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4704.77it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1774.24it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2181.50it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1561.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1460.79it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1306.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1274.19it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1238.72it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4483.49it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1740.74it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2147.62it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1543.16it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1427.12it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1279.53it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1248.03it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1212.05it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3591.01it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1529.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1772.24it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1267.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1130.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 966.93it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 934.82it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 891.84it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_missing_value_in_column_exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3584.88it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1393.69it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1711.26it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1223.42it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1135.05it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1017.29it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 992.32it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 964.10it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_missing_value_in_column_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3809.54it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1424.21it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1748.36it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1250.54it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1172.66it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1047.40it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1021.69it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 992.03it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:vacuously_true_both_min_and_max_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3729.93it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1434.69it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1765.53it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1267.93it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1188.02it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1064.61it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1038.13it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1007.76it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3316.97it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1314.21it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1618.17it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1171.05it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1136.67it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1016.55it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 985.50it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 958.37it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3785.47it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1573.26it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1906.79it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1382.28it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1432.48it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1284.92it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1253.90it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1218.65it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_max_value_none] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4175.51it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1598.74it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1984.06it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1423.08it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1512.96it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1345.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1305.52it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1268.21it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4167.22it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1650.33it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2035.41it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1464.83it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1538.49it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1367.11it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1331.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1291.65it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3236.35it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1495.83it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1878.33it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1385.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1443.08it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1290.65it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1257.47it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1221.40it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_lower_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4299.65it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1687.85it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2077.42it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1488.75it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1552.15it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1371.25it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1331.00it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1291.15it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_on_a_series_with_mostly_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4148.67it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1666.72it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2063.11it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1492.46it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1522.02it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1355.95it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1321.04it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1280.80it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4443.12it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1725.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2132.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1529.09it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1579.03it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1403.48it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1366.56it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1325.32it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4818.27it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1785.57it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 2189.47it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1559.99it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1642.57it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1453.45it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1413.89it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1370.35it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4000.29it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 747.98it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1024.58it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 609.40it/s] Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 819.52it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 656.59it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 741.68it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 649.99it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 716.40it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 666.09it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 661.26it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 655.26it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 2864.96it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 679.13it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 935.12it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 569.16it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 780.89it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 629.47it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 711.56it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 624.54it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 688.36it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 640.56it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 635.90it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 630.29it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4038.81it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 722.78it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 989.77it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 589.94it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 803.72it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 645.48it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 728.66it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 640.61it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 706.62it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 657.83it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 653.22it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 647.41it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:null_max_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 3853.29it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 723.03it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 986.51it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 582.65it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 795.04it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 637.20it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 719.33it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 628.99it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 692.86it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 644.22it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 639.56it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 633.83it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:vacuously_true_null_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 3885.41it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 737.27it/s] Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1009.78it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 608.90it/s] Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 837.69it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 672.34it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 758.05it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 665.87it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 733.69it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 682.54it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 677.66it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 671.55it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3853.29it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1446.06it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1833.44it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1302.04it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1239.91it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1107.77it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1083.38it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1051.27it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4148.67it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1481.30it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1861.10it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1306.50it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1261.82it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1127.65it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1103.11it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1075.81it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4683.76it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1567.09it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1956.91it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1342.18it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1290.36it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1143.88it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1117.29it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1087.88it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4148.67it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1414.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1781.27it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1268.44it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1179.17it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1061.78it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1040.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1015.20it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_no_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4493.09it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1513.92it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1901.03it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1323.40it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1289.07it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1146.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1119.82it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1090.78it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_some_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4378.19it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1534.13it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1923.40it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1346.63it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1300.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1158.09it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1131.91it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1102.02it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4066.22it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1471.69it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1852.88it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1309.49it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1264.58it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1129.02it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1103.47it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1075.26it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4464.40it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1529.37it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1917.25it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1336.33it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1306.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1160.41it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1134.13it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1100.79it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4328.49it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1537.22it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1921.64it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1346.34it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1312.67it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1167.84it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1141.15it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1111.07it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_string_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4739.33it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1596.31it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1985.63it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1380.01it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1210.30it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1087.52it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1064.14it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1037.10it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_string_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3677.60it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1385.17it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1741.34it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1226.64it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1088.16it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 968.55it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 946.74it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 922.99it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_date_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3460.65it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1281.29it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1617.13it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1151.65it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1062.99it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 962.93it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 943.65it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 922.08it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_date_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 3617.34it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1444.07it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1833.98it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1304.47it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1199.06it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1076.77it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1053.78it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1028.08it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_datetime_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4264.67it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1539.76it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1935.53it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1353.29it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1077.33it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 979.46it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 960.62it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 939.43it/s]
_ test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_datetime_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/4 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 4417.38it/s]Calculating Metrics:  50%|█████     | 2/4 [00:00<00:00, 1550.29it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1948.42it/s]Calculating Metrics:  75%|███████▌  | 3/4 [00:00<00:00, 1360.02it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1184.50it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 1004.32it/s]Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 977.52it/s] Calculating Metrics: 100%|██████████| 4/4 [00:00<00:00, 941.64it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2739.58it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 393.70it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 629.92it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 389.41it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 527.66it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 394.94it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 463.31it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 397.87it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 417.56it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 378.31it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 404.18it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 368.16it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 380.82it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 364.71it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 363.74it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 362.58it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2538.16it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 356.13it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 592.77it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 375.67it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 510.46it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 391.24it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 56.03it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 56.03it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 56.03it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 56.03it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 56.03it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 56.03it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 56.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 56.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 56.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 56.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 71.44it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3204.20it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 406.23it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 670.34it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 411.89it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 560.16it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 430.47it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 506.67it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 436.99it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 465.69it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 419.18it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 445.55it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 413.19it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 426.93it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 393.11it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 390.83it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 388.68it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2146.52it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 388.60it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 646.35it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 391.78it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 531.97it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 409.20it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 490.47it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 422.81it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 450.09it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 403.43it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 429.63it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 397.63it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 412.08it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 392.20it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 391.04it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 389.66it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_zero_stdev_exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2975.74it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 402.25it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 660.73it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 393.34it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 530.50it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 408.05it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 474.97it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 408.18it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 428.02it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 385.72it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 412.05it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 382.88it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 395.20it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 376.76it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 375.66it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 374.34it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_max_exact_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3095.43it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 408.74it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 668.34it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 398.63it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 539.28it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 413.28it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 476.82it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 414.57it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 439.84it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 398.60it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 426.13it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 396.85it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 410.02it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 391.05it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 389.92it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 388.58it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_min_exact_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2881.69it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 399.91it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 654.01it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 395.76it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 539.32it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 418.29it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 494.19it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 426.71it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 454.91it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 408.66it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 435.35it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 386.70it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 241.77it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 229.86it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 229.13it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 228.27it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2635.44it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 338.63it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 560.38it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 335.15it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 456.03it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 362.69it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 435.00it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 381.93it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 408.42it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 362.41it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 387.37it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 362.66it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 377.80it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 360.45it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 359.40it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 358.16it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 3241.35it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 426.25it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 694.68it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 421.58it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 570.77it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 437.10it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 514.04it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 442.80it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 471.85it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 424.03it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 452.59it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 419.78it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 437.37it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 416.26it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 414.99it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 413.45it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_missing_value_in_column_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 2979.97it/s]Calculating Metrics:  18%|█▊        | 2/11 [00:00<00:00, 423.54it/s] Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 690.14it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 420.43it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 572.58it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 440.24it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 515.56it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 445.01it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 470.64it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 423.39it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 451.96it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 418.76it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 429.32it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 409.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 407.82it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 406.34it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3278.08it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1246.26it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1480.91it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1162.82it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1048.00it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 963.94it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 949.71it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 933.02it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:vacuously_true_universal_set] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3173.90it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1226.94it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1536.09it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1195.81it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1111.13it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 987.55it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 967.68it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 948.25it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3367.57it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1263.34it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1464.11it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1156.73it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1062.01it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 976.56it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 961.69it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 944.62it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2985.27it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1159.29it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1457.11it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1113.51it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 974.83it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 887.95it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 872.72it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 855.42it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2825.40it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1042.71it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1314.11it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1015.51it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 914.39it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 836.12it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 821.96it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 806.47it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_negative_test_no_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2702.52it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1016.31it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1182.74it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 896.84it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 844.30it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 774.94it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 762.99it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 749.30it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_some_set_intersection_and_extra] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2999.14it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1084.08it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1374.06it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1056.23it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 993.25it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 903.52it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 887.95it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 870.33it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2937.19it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1057.17it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1342.39it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1037.42it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 979.84it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 887.20it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 871.85it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 854.27it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2933.08it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1049.23it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1300.36it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 998.76it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 920.29it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 837.42it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 822.90it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 806.85it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2919.81it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1120.42it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1400.44it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1051.80it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 986.94it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 896.33it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 880.75it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 863.27it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_tie_for_most_common_with_missing_values_and_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2833.03it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 759.01it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 942.54it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 684.23it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 665.87it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 580.19it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 623.98it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 583.22it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 577.89it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 571.82it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__full_value_set__ties_okay__false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2785.99it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 818.00it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1118.93it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 805.01it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 787.78it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 687.59it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 737.37it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 673.41it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 661.32it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 649.14it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common__ties_okay__true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3125.41it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 870.01it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1231.99it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 894.45it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 908.92it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 784.19it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 837.86it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 778.69it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 770.92it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 761.52it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common_but_test_for_last_value__ties_okay__true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3096.57it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 920.01it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1276.80it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 863.74it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 856.75it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 740.31it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 790.93it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 732.89it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 724.72it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 714.05it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2451.38it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 607.17it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 882.41it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 656.08it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 669.97it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 576.84it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 616.21it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 575.32it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 569.85it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 563.38it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2709.50it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 763.57it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 838.19it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 633.32it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 653.95it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 571.62it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 616.90it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 576.31it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 570.87it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 564.48it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test_string_values_value_set_contains_more_than_actual_mode_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2573.98it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 682.83it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 958.75it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 693.24it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 648.25it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 562.74it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 606.30it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 566.62it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 561.17it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 555.00it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_string_values_value_set_contains_more_than_actual_mode_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2881.69it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 783.40it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1080.80it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 766.57it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 773.74it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 661.62it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 702.56it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 650.41it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 643.50it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 635.39it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_extremes] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2820.65it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1085.20it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1308.06it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1037.30it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 868.21it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 809.87it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 799.22it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 786.92it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_normal_quantiles] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2881.69it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1100.00it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1314.93it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1029.59it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 723.60it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 677.13it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 669.16it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 660.06it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_uneven_spacing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3012.07it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1006.07it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1294.04it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 970.17it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 564.97it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 530.44it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 524.77it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 518.35it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_normal_quantiles_wrong_distribution] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2581.11it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 957.82it/s] Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1223.90it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 922.53it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 567.27it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 530.11it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 523.90it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 516.79it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2465.79it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 932.79it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1237.26it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 921.67it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1035.84it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 886.22it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 872.48it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 810.60it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 801.82it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 791.75it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:basic_negative_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3383.87it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1027.26it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1397.17it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1005.83it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1118.84it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 945.39it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 970.38it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 896.73it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 886.12it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 874.00it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3090.87it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 975.19it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1290.26it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 938.06it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1040.82it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 884.20it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 901.97it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 835.88it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 825.19it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 814.01it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3383.87it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1032.95it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1408.43it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1008.06it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1121.77it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 927.08it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 934.39it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 864.54it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 854.70it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 843.39it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:negative_test_case_with_only_a_lower_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3360.82it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1025.13it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1292.34it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 927.64it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1034.76it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 886.22it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 916.19it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 850.69it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 841.27it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 830.31it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_sqlite] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2813.08it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 693.04it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1022.00it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 793.51it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 900.26it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 784.57it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 805.80it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 753.31it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 745.54it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 736.47it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_sqlite] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3454.95it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1031.43it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1409.02it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1012.14it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1125.63it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 950.74it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 979.29it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 903.91it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 893.26it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 880.94it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3430.92it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1030.92it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1317.51it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 963.60it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1076.46it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 914.59it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 921.79it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 855.20it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 845.65it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 834.36it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_range] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3179.91it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1023.00it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1281.58it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 944.77it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1036.50it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 869.11it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 769.81it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 720.98it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 713.86it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 705.46it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3436.55it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1049.89it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1421.92it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1002.52it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1097.70it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 934.56it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 908.42it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 831.60it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 820.21it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 808.96it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3200.54it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1024.13it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1394.73it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1011.71it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1109.96it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 942.37it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 929.28it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 862.43it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 852.79it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 841.41it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_exact_match] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3306.51it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1030.92it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1398.57it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1013.42it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1109.19it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 928.52it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 882.73it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 820.35it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 811.04it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 800.21it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3449.26it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1027.26it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1374.62it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 983.08it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1080.39it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 918.31it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 910.62it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 843.90it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 834.27it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 823.41it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range_match] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3267.86it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1026.63it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1390.22it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1002.94it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1098.39it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 932.98it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 947.08it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 877.19it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 867.01it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 854.70it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_includes_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3230.11it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1003.54it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1360.13it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 987.42it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1081.01it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 917.23it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 878.05it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 816.54it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 807.63it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 796.82it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:vacuously_true_missing_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3401.71it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1041.16it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1422.52it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1026.19it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1125.14it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 952.21it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 969.30it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 896.73it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 886.15it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 874.15it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3301.30it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1035.25it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1314.11it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 965.71it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1062.71it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 905.62it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 863.44it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 805.59it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 797.14it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 787.00it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_and_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3310.42it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1025.13it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1368.01it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 977.47it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1066.33it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 909.75it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 877.32it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 815.88it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 806.88it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 796.39it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3367.57it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1040.12it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1330.68it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 978.95it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1076.95it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 917.79it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 868.96it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 807.66it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 798.74it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 788.45it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3332.78it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1260.31it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1498.10it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1179.25it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1063.63it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 955.34it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 937.02it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 920.13it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3371.63it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1234.53it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1500.38it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1167.19it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1032.88it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 947.14it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 930.41it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 913.39it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2503.31it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1131.91it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1499.84it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1182.83it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1062.93it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 976.96it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 961.95it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 944.88it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3418.34it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1218.04it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1511.19it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1151.10it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1014.39it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 921.83it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 905.62it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 887.16it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_negative_test_set_contained] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2976.79it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1085.76it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1369.79it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1054.84it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 997.98it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 908.09it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 892.56it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 874.72it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_some_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2739.58it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1013.73it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1269.08it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 968.05it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 906.95it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 828.36it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 814.87it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 799.13it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2725.34it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1030.92it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1316.27it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1018.03it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 824.94it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 759.76it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 748.61it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 735.61it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2652.10it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1011.04it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1289.86it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 991.80it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 935.81it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 853.54it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 839.20it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 822.90it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2914.74it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1078.09it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1367.45it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1044.92it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 988.71it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 899.10it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 882.45it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 865.20it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2677.50it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 912.40it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1184.41it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 870.28it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 967.28it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 821.83it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 833.22it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 775.50it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 765.90it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 756.32it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:basic_negative_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2444.95it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 901.71it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1265.06it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 940.53it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1055.54it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 904.02it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 936.05it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 869.20it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 859.49it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 848.05it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_result_format_summary] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3261.51it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1031.94it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1402.43it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1002.22it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1113.55it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 939.67it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 959.69it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 887.81it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 877.68it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 865.55it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2669.83it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 892.03it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1248.77it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 930.67it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1044.92it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 896.22it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 910.32it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 846.71it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 837.41it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 826.57it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_lower_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3170.30it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 956.40it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1303.79it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 954.17it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1060.24it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 901.26it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 922.23it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 849.02it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 839.42it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 824.41it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3338.09it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1035.12it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1308.06it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 940.90it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1045.13it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 892.03it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 895.36it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 831.93it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 822.36it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 811.36it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2323.07it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 821.29it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1156.01it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 877.56it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 987.96it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 852.67it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 888.75it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 826.90it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 818.00it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 807.66it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3389.34it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1024.13it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1314.11it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 939.22it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1039.07it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 885.73it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 887.84it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 824.06it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 814.56it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 803.97it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3327.49it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1000.91it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1258.23it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 930.67it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1038.61it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 886.71it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 887.31it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 824.51it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 815.56it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 804.71it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_min_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3164.32it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 943.81it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1233.44it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 905.80it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1010.09it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 862.07it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 865.43it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 805.25it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 796.59it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 786.36it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_max_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3597.17it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1032.44it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1406.89it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1013.91it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1112.37it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 939.67it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 931.10it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 861.70it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 851.55it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 839.98it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:vacuously_true_null_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3071.63it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 970.90it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1303.39it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 928.92it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1034.15it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 884.02it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 882.36it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 821.12it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 812.35it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 801.92it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_min_equal_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3020.74it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 644.53it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 938.11it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 614.53it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 709.72it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 556.61it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 627.48it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 539.23it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 567.77it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 514.86it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 577.45it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 534.51it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 560.05it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 531.07it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 528.17it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 525.06it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3175.10it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 646.87it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 990.86it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 632.53it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 729.19it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 568.32it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 635.95it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 542.16it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 565.35it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 498.51it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 551.62it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 511.55it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 544.07it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 518.62it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 516.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 513.32it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3472.11it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 664.44it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1019.58it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 653.34it/s] Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 753.23it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 584.03it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 655.79it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 559.54it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 595.02it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 536.81it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 601.41it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 555.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 592.60it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 562.36it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 559.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 556.20it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_min_equal_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3175.10it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 645.43it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 941.91it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 618.45it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 711.45it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 558.56it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 628.74it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 538.26it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 561.04it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 507.18it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 568.58it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 525.70it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 555.29it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 527.06it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 524.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 521.38it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3236.35it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 638.99it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 981.35it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 631.51it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 728.23it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 565.99it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 635.93it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 543.48it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 578.13it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 521.96it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 584.62it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 527.22it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 556.59it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 528.69it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 526.03it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 522.43it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3230.11it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 641.82it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 985.91it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 629.73it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 724.63it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 562.04it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 630.99it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 536.92it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 567.62it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 511.43it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 573.02it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 528.68it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 562.53it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 532.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 530.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 526.93it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_missing_value_in_column_exact_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3034.95it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 617.67it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 876.42it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 589.61it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 683.07it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 528.04it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 593.77it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 510.25it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 531.92it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 484.73it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 544.07it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 505.82it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 534.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 509.57it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 507.21it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 504.45it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_missing_value_in_column_complete_result_format] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3198.10it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 636.08it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 976.04it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 629.21it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 725.86it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 562.09it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 631.42it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 540.34it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 574.93it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 519.47it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 582.06it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 535.65it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 566.25it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 537.85it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 535.20it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 532.03it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:vacuously_true_both_min_and_max_null] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3195.66it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 637.58it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 976.84it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 623.55it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 715.12it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 561.74it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 633.05it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 543.43it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 580.24it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 525.37it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 589.15it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 545.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 582.95it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 554.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 551.61it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 548.45it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3175.10it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 629.96it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 873.36it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 582.32it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 673.68it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 528.49it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 595.06it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 509.08it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 531.07it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 481.16it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 539.38it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 499.25it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 542.85it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 509.02it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 505.78it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 502.57it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:basic_positive_test_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3139.45it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 984.23it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1238.72it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 905.80it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1010.68it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 856.16it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 844.83it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 783.79it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 775.38it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 765.52it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_max_value_none] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3184.74it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 982.27it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1342.28it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 972.54it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1083.91it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 917.23it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 945.94it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 869.68it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 859.11it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 846.62it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3020.74it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 948.62it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1191.82it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 864.45it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 948.77it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 803.97it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 830.66it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 765.97it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 757.19it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 747.56it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3479.31it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1042.84it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1418.91it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1019.95it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1135.07it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 958.04it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 956.04it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 882.21it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 871.57it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 859.61it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_lower_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3150.06it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 959.25it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1291.65it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 910.57it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1004.62it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 837.39it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 850.71it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 782.88it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 773.21it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 761.82it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_on_a_series_with_mostly_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 2658.83it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 815.30it/s] Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1105.87it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 801.28it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 895.72it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 764.77it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 774.09it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 722.97it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 715.55it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 706.96it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3440.77it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1035.12it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1353.11it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 984.69it/s] Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1100.81it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 932.32it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 943.81it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 873.84it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 863.91it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 852.39it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:raise_valueerror_with_both_max_and_min_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/6 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 3472.11it/s]Calculating Metrics:  33%|███▎      | 2/6 [00:00<00:00, 1042.71it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1405.48it/s]Calculating Metrics:  67%|██████▋   | 4/6 [00:00<00:00, 1014.22it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 1111.37it/s]Calculating Metrics:  83%|████████▎ | 5/6 [00:00<00:00, 938.95it/s] Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 954.81it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 882.73it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 872.09it/s]Calculating Metrics: 100%|██████████| 6/6 [00:00<00:00, 859.84it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3140.62it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 489.85it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 743.90it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 477.90it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 647.59it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 514.63it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 606.43it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 534.54it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 557.14it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 511.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 551.24it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 521.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 519.37it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 516.83it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 2862.03it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 408.84it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 670.50it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 436.11it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 590.84it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 450.56it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 530.89it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 469.62it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 477.35it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 442.16it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 478.35it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 455.27it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 453.60it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 451.63it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3053.73it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 509.05it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 820.20it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 507.68it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 682.28it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 493.05it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 573.35it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 507.22it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 524.54it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 483.84it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 522.25it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.75it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 492.73it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 490.27it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:null_max_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3236.35it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 501.77it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 807.45it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 496.22it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 668.17it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 522.38it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 608.74it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 532.69it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 546.55it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 500.78it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 539.29it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 509.41it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 507.23it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 504.57it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:vacuously_true_null_min_and_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 3272.96it/s]Calculating Metrics:  20%|██        | 2/10 [00:00<00:00, 509.30it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 816.69it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 504.03it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 675.59it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 527.62it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 623.35it/s]Calculating Metrics:  80%|████████  | 8/10 [00:00<00:00, 544.71it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 572.15it/s]Calculating Metrics:  90%|█████████ | 9/10 [00:00<00:00, 522.31it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 562.02it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 529.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 527.45it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 524.74it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3076.13it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1204.74it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1448.18it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1144.19it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1029.23it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 946.80it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 932.32it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 915.59it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2105.05it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 988.17it/s] Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1313.49it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1051.27it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 956.56it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 882.75it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 869.72it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 854.52it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3464.94it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1291.95it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1637.28it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1263.44it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1136.85it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1040.15it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1023.10it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1003.81it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3464.94it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1292.74it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1616.77it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1249.14it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1119.08it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1023.95it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1001.36it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 978.47it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_no_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3311.73it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1271.58it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1500.38it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1179.25it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1124.84it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1030.69it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1014.19it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 978.65it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_some_set_intersection] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3062.65it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1195.98it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1500.38it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1176.44it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1106.15it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1012.58it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 995.80it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 975.96it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_null_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3436.55it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1297.94it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1644.02it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1274.67it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1216.30it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1106.97it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1087.68it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1066.11it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_duplicate_values_in_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3383.87it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1278.75it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1619.42it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1249.98it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1182.03it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1078.73it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1060.67it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1039.69it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_duplicate_and_null_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3332.78it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1267.35it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1608.25it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1247.65it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1184.56it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1080.62it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1062.44it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1041.24it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_string_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 3087.45it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1210.83it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1537.36it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1198.72it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1020.41it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 905.62it/s] Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 891.57it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 876.11it/s]
_ test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_string_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/5 [00:00<?, ?it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 2607.59it/s]Calculating Metrics:  40%|████      | 2/5 [00:00<00:00, 1150.70it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1518.57it/s]Calculating Metrics:  80%|████████  | 4/5 [00:00<00:00, 1195.13it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1149.94it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1051.73it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1034.30it/s]Calculating Metrics: 100%|██████████| 5/5 [00:00<00:00, 1014.59it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_baseline_categorical_fixed_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4476.31it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1343.25it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1788.87it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1149.96it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1324.88it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1093.18it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1213.81it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1110.93it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1251.76it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1173.09it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1158.56it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1140.42it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_categorical_fixed_alternate_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 5140.08it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1409.38it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1861.10it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1191.00it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1292.94it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1076.18it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1202.38it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1104.78it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1244.86it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1167.26it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1152.64it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1134.87it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:internal_holdout_with_categorical_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4807.23it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1385.17it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1825.99it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1178.40it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1356.15it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1159.61it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1295.14it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1183.72it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1331.59it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1177.51it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1157.60it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1137.86it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4387.35it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1324.59it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1760.59it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1144.21it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1337.30it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1140.00it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1251.10it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1140.69it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1281.82it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1197.64it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1181.64it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1163.38it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_05] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 5155.87it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1411.51it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1862.20it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1192.35it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1412.41it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1195.57it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1332.16it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1214.16it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1361.09it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1268.64it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1248.94it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1228.35it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:missing_vals_no_holdout] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4750.06it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1391.61it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1841.49it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1189.99it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1407.67it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1195.30it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1330.40it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1164.11it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1305.42it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1218.62it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1202.50it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1182.64it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_explicit_infinite_endpoints] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4201.66it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1802.64it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2071.26it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1414.80it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1249.31it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 966.46it/s] Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1038.71it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 958.53it/s] Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1051.17it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 985.66it/s] Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 976.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 964.95it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_test_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 3697.05it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1506.44it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1727.05it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1166.06it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1267.38it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1082.08it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1164.64it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1054.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1149.54it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1063.82it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1052.02it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1038.17it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_should_fail_with_no_holdout] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4291.95it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1795.31it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2057.65it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1403.72it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1515.44it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1297.00it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1382.43it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1243.22it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1355.43it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1256.49it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1242.55it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1225.17it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_should_always_succeed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 3936.47it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1582.31it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1772.44it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1164.70it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1271.06it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1092.75it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1178.22it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1076.88it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1172.32it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1087.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1076.41it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1063.34it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_and_partition_object_supports_profiling] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 4626.92it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 910.32it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 1251.41it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 760.80it/s] Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 923.33it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 760.55it/s]Calculating Metrics:  75%|███████▌  | 6/8 [00:00<00:00, 869.56it/s]Calculating Metrics:  75%|███████▌  | 6/8 [00:00<00:00, 763.36it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 869.34it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 783.17it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 843.69it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 794.11it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 787.87it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 780.34it/s]
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 3303.25it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1111.15it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 1314.09it/s]Calculating Metrics:  45%|████▌     | 5/11 [00:00<00:00, 872.76it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1046.97it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 889.68it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 965.98it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 859.02it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 937.30it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 851.72it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 897.53it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 843.11it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 838.04it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 831.95it/s]
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 5667.98it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 990.27it/s] Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 1355.77it/s]Calculating Metrics:  38%|███▊      | 3/8 [00:00<00:00, 803.25it/s] Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 983.33it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 796.58it/s]Calculating Metrics:  75%|███████▌  | 6/8 [00:00<00:00, 907.47it/s]Calculating Metrics:  75%|███████▌  | 6/8 [00:00<00:00, 790.01it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 898.72it/s]Calculating Metrics:  88%|████████▊ | 7/8 [00:00<00:00, 807.68it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 871.77it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 817.92it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 811.22it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 803.31it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_tail_weights_should_fail_with_no_internal_holdout] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 3555.25it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1649.35it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1903.91it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1301.69it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1404.19it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1189.25it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1281.83it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1166.87it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1274.78it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1186.54it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1174.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1159.04it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4514.86it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1842.44it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2101.78it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1419.58it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1545.92it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1320.51it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1419.93it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1283.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1400.75it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1296.98it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1282.75it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1265.97it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_uniform_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4394.24it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1927.53it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2202.66it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1510.92it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1633.57it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1396.37it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1499.17it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1361.46it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1481.68it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1375.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1359.68it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1340.22it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_ntile_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4453.73it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1928.64it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2198.96it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1464.49it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1573.09it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1350.33it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1452.95it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1324.53it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1442.55it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1341.46it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1326.43it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1308.13it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_kde_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4400.00it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1912.15it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2186.13it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1498.72it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1605.08it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1373.89it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1476.28it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1343.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1465.06it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1361.54it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1346.29it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1328.01it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4445.47it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1840.82it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2111.51it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1428.67it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1558.72it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1329.84it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1431.69it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1296.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1413.33it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1307.63it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1293.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1276.11it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_uniform_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4656.46it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1973.33it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2249.20it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1527.20it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1441.84it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1247.99it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1346.38it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1234.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1347.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1257.54it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1243.94it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1227.84it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_ntile_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4453.73it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1934.20it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2212.42it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1515.17it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1633.21it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1391.08it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1491.44it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1351.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1472.72it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1367.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1352.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1333.92it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_kde_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4773.03it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1998.95it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2278.77it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1551.84it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1647.41it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1401.97it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1503.47it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1364.94it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1486.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1378.24it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1361.98it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1342.46it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_bimodal_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4348.68it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1915.86it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2192.07it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1506.14it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1638.67it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1385.63it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1485.89it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1349.79it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1470.60it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1365.53it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1349.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1323.96it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2415.38it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 770.13it/s] Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 212.99it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 173.51it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 148.33it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 144.04it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 162.82it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 159.75it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 178.61it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 175.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 175.40it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 174.97it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_uniform_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2441.74it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1261.82it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1458.58it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1050.62it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1174.12it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1017.86it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1098.56it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1006.55it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1099.71it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1026.67it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1015.79it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1002.78it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 3496.71it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1594.94it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1819.50it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1259.17it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1387.01it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1187.04it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1273.12it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1160.29it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1263.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1175.53it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1161.75it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1145.46it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2810.72it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1432.60it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1644.83it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1178.44it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1295.57it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1117.33it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1199.96it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1097.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1195.22it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1115.80it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1102.96it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1087.48it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4032.02it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1744.36it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1981.06it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1355.01it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1491.19it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1276.64it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1370.86it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1251.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1363.85it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1267.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1253.99it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1237.79it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4790.75it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2101.88it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2390.19it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1641.48it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1787.53it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1522.43it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1623.42it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1476.02it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1605.17it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1492.04it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1473.70it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1452.10it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4259.26it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1972.40it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2251.13it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1565.86it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1691.64it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1447.17it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1550.72it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1412.16it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1536.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1422.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1404.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1384.21it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4695.55it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2074.85it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2363.25it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1622.93it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1771.78it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1510.61it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1615.84it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1468.98it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1597.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1485.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1467.51it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1446.53it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 5032.16it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2124.51it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2414.40it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1645.86it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1790.69it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1521.41it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1626.72it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1475.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1604.28it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1487.63it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1469.62it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1447.92it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity_tail_weight] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4153.80it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1953.11it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2236.01it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1565.86it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1710.17it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1463.47it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1567.67it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1428.58it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1554.66it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1448.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1431.29it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1410.22it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_tail_weight] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4343.05it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1795.31it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2056.03it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1471.89it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1623.00it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1401.97it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1506.91it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1379.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1503.75it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1404.29it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1388.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1369.44it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_internal_weight] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 5173.36it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2177.16it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2470.43it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1678.93it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1827.13it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1548.69it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1648.06it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1495.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1625.70it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1508.50it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1490.04it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1467.68it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/7 [00:00<?, ?it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 4715.35it/s]Calculating Metrics:  29%|██▊       | 2/7 [00:00<00:00, 1386.78it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1840.15it/s]Calculating Metrics:  43%|████▎     | 3/7 [00:00<00:00, 1186.17it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1388.38it/s]Calculating Metrics:  71%|███████▏  | 5/7 [00:00<00:00, 1185.03it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1322.71it/s]Calculating Metrics:  86%|████████▌ | 6/7 [00:00<00:00, 1207.69it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1358.38it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1268.31it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1251.98it/s]Calculating Metrics: 100%|██████████| 7/7 [00:00<00:00, 1231.91it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4077.09it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1920.47it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2189.09it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1517.48it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1635.21it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1397.24it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1501.79it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1372.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1494.53it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1390.63it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1374.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1354.17it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence_bins_do_not_cover_all_data] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4035.90it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1905.64it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2186.13it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1526.20it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1669.80it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1425.04it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1529.58it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1397.40it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1522.07it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1418.22it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1401.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1382.48it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_return_partitions_should_have_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4132.32it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1933.30it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2210.32it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1542.70it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1697.41it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1451.32it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1556.11it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1416.70it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1541.39it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1431.72it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1414.82it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1393.20it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_tail_weights_return_partitions_should_have_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4646.14it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2053.51it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2328.62it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1601.00it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1709.77it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1441.77it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1522.64it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1387.64it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1508.50it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1405.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1388.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1367.36it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_empty_tail_weights_in_return] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4429.04it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1922.23it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2186.36it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1487.66it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1632.93it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1407.01it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1511.73it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1382.38it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1506.27it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1404.55it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1388.28it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1368.60it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_observed_with_tail_weight_infinite_kl_divergence] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4721.99it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2056.54it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2337.44it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1613.44it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1756.72it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1498.65it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1594.94it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1451.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1578.92it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1468.65it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1451.60it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1430.20it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_infinite_endpoints_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4541.75it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2006.12it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2281.99it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1533.79it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1650.28it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1407.62it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1502.93it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1369.46it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1491.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1386.60it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1369.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1349.76it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_infinite_endpoint_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4494.30it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 2001.82it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2281.25it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1577.76it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1697.41it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1450.24it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1553.73it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1415.20it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1540.32it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1432.92it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1415.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1395.57it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_infinite_endpoint_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4119.13it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1929.30it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2201.50it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1537.50it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1682.63it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1440.00it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1543.80it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1405.24it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1528.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1422.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1405.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1384.82it/s]
_ test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 4429.04it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1956.75it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 2232.20it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 1542.25it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1683.40it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1439.43it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1539.97it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 1402.02it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1525.69it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1418.86it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1401.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1381.22it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_baseline_categorical_fixed_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3622.02it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1042.19it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1352.67it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 957.33it/s] Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 1043.49it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 898.97it/s] Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 985.07it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 895.37it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 899.97it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 846.65it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 933.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 890.03it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 883.49it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 875.23it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_categorical_fixed_alternate_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3521.67it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1009.58it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1423.61it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 977.81it/s] Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 1099.33it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 935.18it/s] Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1018.35it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 914.82it/s] Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 880.28it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 827.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 911.12it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 868.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 861.59it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 853.58it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:internal_holdout_with_categorical_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3905.31it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1071.75it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1504.41it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1020.95it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 1154.71it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 975.95it/s] Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1064.16it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 951.61it/s] Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 968.75it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 905.38it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 995.88it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 945.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 937.20it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 927.94it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3650.40it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1030.92it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1388.96it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 967.60it/s] Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 1043.84it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 897.82it/s] Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 984.41it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 894.12it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 900.60it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 846.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 932.46it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 887.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 880.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 872.34it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_05] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3744.91it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1020.39it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1456.73it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1000.25it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 1167.08it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 983.00it/s] Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1070.83it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 961.81it/s] Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 988.52it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 923.37it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 1015.24it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 961.87it/s] Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 954.12it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 943.60it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:missing_vals_no_holdout] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3795.75it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1027.26it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1423.61it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 980.89it/s] Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 1133.19it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 965.58it/s] Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 1054.41it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 953.56it/s] Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 953.98it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 894.88it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 985.12it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 937.41it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 930.16it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 919.69it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_explicit_infinite_endpoints] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1870.16it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1051.53it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1272.80it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 971.65it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 458.16it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 429.51it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 472.74it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 451.81it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 474.50it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 458.55it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 499.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 485.66it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 483.94it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 481.85it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_test_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2645.41it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1238.81it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1490.34it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1074.31it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 464.58it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 434.83it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 477.23it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 452.65it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 478.27it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 462.24it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 503.52it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 489.24it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 487.46it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 485.35it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_should_fail_with_no_holdout] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2712.13it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1256.72it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1525.20it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1104.78it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 566.01it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 522.94it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 572.27it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 539.06it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 565.10it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 541.80it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 588.93it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 569.04it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 566.69it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 563.70it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_should_always_succeed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2520.62it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1219.90it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1490.42it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1086.98it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 602.91it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 554.02it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 604.65it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 569.26it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 598.27it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 573.46it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 623.17it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 601.22it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 598.45it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 595.24it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_tail_weights_should_fail_with_no_internal_holdout] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2607.59it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1219.19it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1477.47it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1071.62it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 602.77it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 552.49it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 602.46it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 567.64it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 592.24it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 567.18it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 616.49it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 593.51it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 590.44it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 587.04it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2706.44it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1257.47it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1527.89it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1111.32it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 630.32it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 579.87it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 633.18it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 596.73it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 624.30it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 597.55it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 649.31it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 626.13it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 623.34it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 619.89it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_uniform_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2649.17it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1283.25it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1558.83it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1144.42it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 791.62it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 713.07it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 773.14it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 721.84it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 747.66it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 712.35it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 771.44it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 740.50it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 736.57it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 731.82it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_ntile_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2580.71it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1261.82it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1514.46it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1109.46it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 895.76it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 798.10it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 860.74it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 794.01it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 817.13it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 774.30it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 838.36it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 801.93it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 797.16it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 791.31it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_kde_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2452.45it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1209.52it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1450.56it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1078.69it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 880.65it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 789.09it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 853.21it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 792.24it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 816.98it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 775.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 840.19it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 805.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 800.45it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 794.96it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1963.86it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1081.42it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1349.59it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1001.66it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 418.41it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 393.53it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 432.03it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 412.81it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 431.67it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 418.15it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 455.93it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 443.93it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 442.48it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 440.76it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_uniform_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2714.32it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1322.39it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1594.99it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1154.34it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 791.00it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 713.01it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 772.67it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 718.68it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 740.36it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 704.04it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 762.94it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 732.37it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 728.43it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 723.65it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_ntile_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2607.59it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1275.93it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1529.00it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1115.65it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 842.91it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 751.94it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 810.81it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 745.83it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 738.82it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 701.60it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 760.14it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 729.19it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 725.16it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 720.22it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_kde_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2619.39it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1264.58it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1532.54it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1117.09it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 900.50it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 800.15it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 861.98it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 794.49it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 814.40it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 770.05it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 833.39it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 795.77it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 791.24it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 785.70it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_bimodal_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1903.69it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1070.93it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1337.82it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1010.80it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 704.21it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 640.72it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 695.89it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 651.41it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 663.04it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 633.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 687.33it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 660.18it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 656.91it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 652.94it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_auto_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2418.51it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1172.41it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1448.98it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1055.61it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 450.38it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 422.83it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 464.95it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 444.22it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 471.64it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 455.91it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 496.57it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 482.61it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 480.89it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 478.78it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_uniform_partition] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2597.09it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1287.39it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1551.05it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1121.47it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 785.76it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 713.07it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 774.19it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 722.37it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 748.94it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 713.81it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 774.16it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 743.95it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 740.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 735.34it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1903.91it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1126.82it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1368.97it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1053.40it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1019.92it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 904.77it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 973.73it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 896.43it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 901.40it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 852.83it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 922.53it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 882.20it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 876.80it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 870.19it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2365.32it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1243.49it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1504.95it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1108.09it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1040.74it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 921.14it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 990.21it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 911.85it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 937.48it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 886.39it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 958.28it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 915.68it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 909.92it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 902.90it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2228.35it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1223.99it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1518.12it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1140.43it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1052.19it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 929.67it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 998.33it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 918.26it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 926.51it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 875.27it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 946.31it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 904.30it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 898.52it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 891.61it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2462.89it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1258.98it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1487.69it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1116.45it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1031.05it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 908.89it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 973.81it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 888.44it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 904.82it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 853.89it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 922.80it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 882.05it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 876.64it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 869.91it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2163.13it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1201.89it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1436.82it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1093.31it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 981.96it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 872.88it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 940.52it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 868.39it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 881.67it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 835.22it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 903.71it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 864.11it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 858.91it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 852.58it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1763.61it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1065.29it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1330.61it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 905.54it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 873.27it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 784.84it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 847.32it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 788.44it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 812.60it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 773.40it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 837.72it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 805.03it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 800.65it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 795.09it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 3009.91it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1413.41it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1688.75it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1221.29it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1167.07it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1016.28it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1085.64it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 990.00it/s] Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 1007.69it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 947.07it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 1022.41it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 972.52it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 965.86it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 957.70it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity_tail_weight] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 3048.74it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1451.94it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1730.09it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1176.91it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1185.00it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1032.41it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1103.34it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1006.93it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 1022.70it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 962.28it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 1038.24it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 988.42it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 980.31it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 971.66it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_tail_weight] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2943.37it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1415.44it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1646.12it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1212.87it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1207.73it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1049.07it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1120.24it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1021.45it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 1032.75it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 970.79it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 1047.34it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 996.83it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 989.92it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 981.46it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_internal_weight] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2973.63it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1415.44it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1686.83it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1233.01it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1263.63it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1081.81it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1121.24it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 966.38it/s] Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 967.97it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 910.24it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 983.01it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 934.73it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 928.19it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 920.12it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence0] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3425.32it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 1026.76it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 1389.42it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 979.69it/s] Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 935.32it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 815.80it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 899.65it/s]Calculating Metrics:  78%|███████▊  | 7/9 [00:00<00:00, 819.50it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 836.58it/s]Calculating Metrics:  89%|████████▉ | 8/9 [00:00<00:00, 787.09it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 868.57it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 830.12it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 824.33it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 817.23it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence1] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2030.40it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1146.45it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1367.93it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1046.00it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 895.67it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 802.16it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 865.72it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 802.36it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 817.99it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 775.14it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 839.30it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 805.09it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 800.58it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 794.96it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence_bins_do_not_cover_all_data] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2408.10it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1277.49it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1558.83it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1169.09it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1082.40it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 952.25it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1022.25it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 936.41it/s] Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 960.23it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 905.88it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 978.73it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 933.52it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 927.48it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 918.96it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_return_partitions_should_have_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1966.39it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1134.06it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1416.36it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1072.94it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 955.75it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 851.85it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 917.97it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 848.72it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 851.05it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 805.85it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 871.21it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 834.39it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 829.55it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 823.53it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_tail_weights_return_partitions_should_have_tail_weights] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2045.00it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1141.23it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1411.75it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1069.52it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 990.48it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 880.00it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 947.27it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 874.14it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 900.41it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 851.72it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 920.96it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 880.84it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 875.37it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 868.66it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_empty_tail_weights_in_return] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 3023.47it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1439.98it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1719.21it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1257.85it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1020.67it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 903.65it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 971.80it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 895.37it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 921.42it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 871.78it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 942.42it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 901.14it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 895.33it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 888.47it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_observed_with_tail_weight_infinite_kl_divergence] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2921.33it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1374.06it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1605.99it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1175.26it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 983.37it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 873.72it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 940.03it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 868.81it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 892.14it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 845.80it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 915.28it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 876.62it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 871.14it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 864.63it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_infinite_endpoints_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 3052.62it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1450.19it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1720.15it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1255.47it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1178.34it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1028.39it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1099.01it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1003.24it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 1022.18it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 961.07it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 1037.54it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 987.51it/s] Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 980.92it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 972.77it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_infinite_endpoint_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2939.25it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1399.62it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1629.49it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1195.47it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 983.54it/s] Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 872.22it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 937.20it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 861.49it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 880.90it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 832.09it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 900.17it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 860.53it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 855.09it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 848.50it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_infinite_endpoint_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2912.71it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1349.41it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1615.89it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1198.03it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1041.51it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 921.22it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 990.08it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 910.84it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 935.62it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 883.85it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 955.42it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 912.24it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 906.45it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 899.42it/s]
_ test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_non_zero_tail_hold_out] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/11 [00:00<?, ?it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 2978.38it/s]Calculating Metrics:  36%|███▋      | 4/11 [00:00<00:00, 1436.77it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1691.02it/s]Calculating Metrics:  55%|█████▍    | 6/11 [00:00<00:00, 1229.46it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 1128.03it/s]Calculating Metrics:  73%|███████▎  | 8/11 [00:00<00:00, 982.30it/s] Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 1047.47it/s]Calculating Metrics:  82%|████████▏ | 9/11 [00:00<00:00, 954.50it/s] Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 963.59it/s]Calculating Metrics:  91%|█████████ | 10/11 [00:00<00:00, 905.21it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 976.74it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 930.94it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 924.76it/s]Calculating Metrics: 100%|██████████| 11/11 [00:00<00:00, 917.19it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_positive_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3968.12it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2590.68it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2137.77it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1782.53it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_upper_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3905.31it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2562.19it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2154.24it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1804.78it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_lower_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 4258.18it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2727.12it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2267.19it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1859.18it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_kwargs_args] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 4539.29it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2864.96it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2364.32it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1937.32it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2289.47it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1324.38it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1935.98it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1621.93it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1517.48it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1407.48it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2700.78it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1331.10it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1869.12it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1570.90it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1463.98it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1353.00it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:positive_test_with_column_order] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2434.30it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1296.94it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1846.49it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1556.33it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1452.32it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1344.97it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:column_exists_but_wrong_index] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2468.69it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1322.71it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1867.04it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1569.72it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1461.94it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1351.04it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3637.73it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2278.27it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1880.01it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1555.17it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3498.17it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2216.86it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1801.68it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1485.76it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3390.71it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2183.40it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1745.44it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1455.34it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 3998.38it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2425.86it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2010.69it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1675.04it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_min_greater_than_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 4293.04it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2688.66it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2212.19it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1781.78it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/1 [00:00<?, ?it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 4466.78it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2768.52it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 2278.27it/s]Calculating Metrics: 100%|██████████| 1/1 [00:00<00:00, 1882.54it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2202.89it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1262.20it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1808.28it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1534.69it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1433.71it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1330.68it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2421.65it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1310.31it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1867.04it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1573.55it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1468.34it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1357.60it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_misnamed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2403.61it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1296.94it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1855.07it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1565.04it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1459.65it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1352.13it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_columns_are_right_but_ordering_wrong] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2487.72it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1331.53it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1890.18it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1589.65it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1482.61it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1369.79it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_extra_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2268.42it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1148.18it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1646.12it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1409.38it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1323.54it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1221.76it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:null_list_provides_vacuously_true_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2501.08it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1362.67it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1949.48it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1665.40it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1563.87it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1450.31it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2520.62it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1178.18it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1760.83it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1361.57it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1728.18it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1525.39it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1462.11it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1392.38it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2618.17it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1109.90it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1652.93it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1262.58it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1583.15it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1408.43it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1351.84it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1290.82it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2841.67it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1250.17it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1887.20it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1466.28it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1860.00it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1646.55it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1583.95it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1513.64it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 3104.59it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1366.22it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 2038.54it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1566.21it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1984.06it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1761.57it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1691.02it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1611.95it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_max_lt_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 3039.35it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1358.70it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 2041.02it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1568.84it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1982.81it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1760.59it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1689.44it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1609.48it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2947.51it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1331.53it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 2007.80it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1548.00it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1966.08it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1730.09it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1657.39it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1552.87it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1869.12it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1145.67it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1698.10it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1488.13it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1394.85it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1305.62it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2666.44it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1459.90it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2037.06it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1713.71it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1597.53it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1476.09it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_missing_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2577.94it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1338.32it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1763.79it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1477.13it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1380.16it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1281.29it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_column_is_missing_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2563.76it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1351.26it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1901.32it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1594.79it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1483.66it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1370.02it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2481.84it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1370.24it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1959.04it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1654.56it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1544.58it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1417.71it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3039.35it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1597.83it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2304.56it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1949.48it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1821.63it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1686.49it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3059.30it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1653.25it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2353.71it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1976.58it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1845.27it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1709.52it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2718.28it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1497.43it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2172.09it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1836.79it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1715.81it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1592.67it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2723.57it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1528.54it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2166.48it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1837.99it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1720.74it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1575.92it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2874.78it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1589.96it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2280.75it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1926.64it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1798.59it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1661.11it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_null_set_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3088.59it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1658.48it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2336.66it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1968.23it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1836.39it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1699.47it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_vacuously_true_null_set_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3163.13it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1683.78it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2383.80it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2005.88it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1869.12it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1728.54it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_positive_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 3172.70it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1369.35it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 2048.50it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1563.58it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1975.96it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1754.20it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1683.33it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1604.96it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_upper_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 3050.40it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1307.45it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1968.23it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1519.68it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1924.29it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1712.19it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1643.75it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1567.38it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_lower_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 3050.40it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1347.35it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 2022.33it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1552.87it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1962.09it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1744.24it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1675.04it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1596.61it/s]
_ test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_kwargs_args] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 3141.80it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1365.78it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 2044.51it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1568.26it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1981.25it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1758.37it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1686.94it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1607.63it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_positive_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3844.46it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1811.01it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1187.01it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1064.41it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1019.77it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 972.71it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_upper_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3692.17it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1709.87it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1376.54it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1221.05it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1165.57it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1101.45it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_lower_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 4100.00it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1902.18it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1540.89it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1356.06it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1288.77it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1216.62it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_kwargs_args] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 4324.02it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1889.33it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1472.46it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1304.40it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1241.29it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1175.70it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2226.28it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1360.46it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2028.68it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1727.12it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1623.50it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1499.04it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2428.66it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1435.42it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2109.81it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1803.61it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1690.91it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1571.49it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:positive_test_with_column_order] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2475.98it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1455.85it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2116.73it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1806.72it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1693.64it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1573.55it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:column_exists_but_wrong_index] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2468.69it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1451.82it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2132.34it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1818.08it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1703.62it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1583.65it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 4206.92it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1960.87it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1320.21it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1180.66it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1128.71it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1072.99it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3672.77it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1794.74it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1246.82it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1116.69it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1062.66it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1010.07it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3816.47it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1837.99it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1439.86it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1272.93it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1212.23it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1146.14it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3637.73it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1677.72it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1353.00it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1184.00it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1122.97it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1058.10it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_min_greater_than_max] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3692.17it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1639.04it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1386.09it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1205.61it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1139.60it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1071.21it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 3908.95it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1754.94it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1442.08it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1264.49it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1190.55it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1124.93it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2150.93it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1338.75it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2011.66it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1734.62it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1631.39it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1520.78it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2462.89it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1455.34it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2143.23it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1829.58it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1715.11it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1594.79it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_misnamed] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2434.30it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1443.33it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2125.85it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1813.36it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1699.47it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1579.78it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_columns_are_right_but_ordering_wrong] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2221.56it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1358.70it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1993.96it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1713.71it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1612.88it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1501.18it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_extra_column] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1558.64it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1070.79it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1682.43it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1480.52it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1403.72it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1309.08it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:null_list_provides_vacuously_true_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2403.61it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1431.01it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2116.73it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1810.23it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1699.47it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1580.07it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2403.61it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1208.73it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1863.31it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1461.94it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1870.23it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1673.04it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1608.45it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1537.69it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:vacuously_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2688.66it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1275.64it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1945.41it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1510.64it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1924.29it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1711.26it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1643.97it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1569.92it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2316.02it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1169.63it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1806.72it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1419.39it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1815.98it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1623.39it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1560.96it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1488.93it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2341.88it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1179.17it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1819.65it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1421.32it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1819.39it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1626.96it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1564.07it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1494.05it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_max_lt_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2391.28it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1184.83it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1823.21it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1421.56it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1806.07it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1613.61it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1551.91it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1481.56it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2071.26it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1068.61it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1676.72it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1326.47it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1699.02it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1521.33it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1464.83it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1401.37it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2109.81it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1312.77it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1982.65it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1709.52it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1610.41it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1501.72it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2198.27it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1337.04it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2003.97it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1722.86it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1619.42it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1510.64it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_missing_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1875.81it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1221.05it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1874.13it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1628.54it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1536.09it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1438.87it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_column_is_missing_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2513.06it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1461.94it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2138.86it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1821.23it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1694.67it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1571.19it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2445.66it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1447.31it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2129.63it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1818.08it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1703.62it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1583.65it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2335.36it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1402.31it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2078.96it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1784.05it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1673.37it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1557.77it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2514.57it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1471.17it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2153.13it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1836.79it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1719.68it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1599.05it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2458.56it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1449.31it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2132.34it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1820.05it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1706.74it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1586.35it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2212.19it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1326.47it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1972.40it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1680.75it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1580.07it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1475.05it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2232.20it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1364.45it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1984.53it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1700.85it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1591.16it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1479.47it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_null_set_exact_match_true] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2380.42it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1430.53it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2114.60it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1797.05it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1686.49it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1569.72it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_vacuously_true_null_set_exact_match_false] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/2 [00:00<?, ?it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 2686.93it/s]Calculating Metrics:  50%|█████     | 1/2 [00:00<00:00, 1538.07it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 2231.61it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1897.45it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1776.12it/s]Calculating Metrics: 100%|██████████| 2/2 [00:00<00:00, 1650.00it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_positive_case] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2341.88it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1184.83it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1825.99it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1436.65it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1839.34it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1648.06it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1585.55it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1514.92it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_upper_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1783.29it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1023.75it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1630.12it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1314.21it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1703.62it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1537.69it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1483.13it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1421.96it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_lower_error] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2432.89it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1207.69it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1860.41it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1456.61it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1860.00it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1661.11it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1596.61it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1524.28it/s]
_ test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_kwargs_args] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/3 [00:00<?, ?it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 2364.32it/s]Calculating Metrics:  33%|███▎      | 1/3 [00:00<00:00, 1194.96it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1841.63it/s]Calculating Metrics:  67%|██████▋   | 2/3 [00:00<00:00, 1449.56it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1851.79it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1655.65it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1588.15it/s]Calculating Metrics: 100%|██████████| 3/3 [00:00<00:00, 1515.28it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3869.28it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 499.65it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 704.57it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 390.06it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 395.92it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 305.62it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 456.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 430.67it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 428.90it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 426.89it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3936.47it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 502.37it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 707.70it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 397.25it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 407.37it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 315.88it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 470.32it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 443.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 441.65it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 439.54it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3723.31it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 477.87it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 668.88it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 371.88it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 374.36it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 294.83it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 448.19it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 424.07it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 422.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 420.56it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3869.28it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 440.74it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 614.25it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 348.19it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 354.65it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 278.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 423.03it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 400.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 399.08it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 397.32it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_all_are_missing_the_default_behavior] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3929.09it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 496.16it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 695.88it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 363.37it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 369.55it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 290.19it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 461.19it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 435.33it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 433.59it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 431.55it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4140.48it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 503.64it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 708.22it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 395.93it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 404.56it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 307.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 456.74it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 429.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 427.19it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 425.01it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:row_condition_with_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 623.27it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 363.25it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 524.94it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 379.91it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 363.84it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 309.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 390.95it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 375.74it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 373.98it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 372.36it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_with_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4090.01it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 491.17it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 691.90it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 387.99it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 392.23it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 304.79it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 435.27it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 411.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 410.14it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 408.29it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_without_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4074.12it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 502.13it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 706.39it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 390.79it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 384.21it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 297.47it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 423.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 400.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 399.25it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 397.51it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_with_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3966.24it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 485.28it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 680.56it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 376.35it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 379.54it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 294.65it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 410.47it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 387.79it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 386.25it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 384.51it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_without_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4000.29it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 488.42it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 686.84it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 386.56it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 386.51it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 301.86it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 432.57it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 409.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 407.74it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 405.90it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3929.09it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 496.13it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 697.35it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 391.49it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 390.44it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 305.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 458.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 432.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 430.58it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 428.55it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3695.42it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 457.97it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 642.25it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 362.32it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 358.55it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 281.39it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 428.36it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 405.57it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 403.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 401.87it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3832.16it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 487.23it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 680.27it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 370.91it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 370.24it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 290.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 438.38it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 414.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 412.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 410.87it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3899.86it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 438.39it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 615.87it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 349.81it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 349.04it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 273.47it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 411.90it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 390.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 388.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 387.21it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_all_are_missing_the_default_behavior] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3839.18it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 495.55it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 688.12it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 381.53it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 373.48it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 290.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 457.11it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 430.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 428.78it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 426.72it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3921.74it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 499.86it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 704.02it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 395.83it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 376.90it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 292.93it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 436.04it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 411.50it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 409.68it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 407.76it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4056.39it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 502.28it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 707.90it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 396.41it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 385.29it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 302.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 433.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 409.61it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 407.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 405.86it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_with_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4007.94it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 490.19it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 688.83it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 388.05it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 369.93it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 290.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 416.78it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 393.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 391.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 390.14it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_without_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3936.47it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 488.42it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 687.78it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 388.96it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 370.03it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 291.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 427.66it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 404.95it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 403.42it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 401.65it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3983.19it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 444.85it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 629.46it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 343.14it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 359.65it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 275.86it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 424.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 398.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 396.81it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 395.05it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3951.30it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 429.26it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 608.52it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 330.97it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 346.97it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 267.74it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 413.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 387.81it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 386.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 384.59it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4140.48it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 449.14it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 637.46it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 349.20it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 369.31it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 282.54it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 428.71it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 402.52it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 401.04it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 399.29it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4150.72it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 449.04it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 636.27it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 345.11it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 364.90it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 277.57it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 414.71it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 389.11it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 387.60it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 385.85it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3794.03it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 430.94it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 609.37it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 335.20it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 354.92it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 271.33it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 411.35it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 386.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 385.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 383.79it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test_more_than_2_columns] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3780.36it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 405.76it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 572.18it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 323.06it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 344.38it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 261.21it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 400.25it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 375.80it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 374.33it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 372.72it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:row_condition_with_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 369.97it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 225.71it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 328.95it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 243.41it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 243.80it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 213.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 285.95it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 276.94it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 276.12it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 275.26it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 4114.08it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 451.88it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 640.19it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 352.12it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 367.75it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 281.61it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 422.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 396.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 395.17it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 393.44it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_with_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3844.46it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 416.91it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 591.33it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 326.18it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 339.90it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 261.67it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 385.44it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 357.52it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 354.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 352.57it/s]
_ test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_different_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3914.42it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 403.07it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 569.39it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 312.02it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 325.63it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 249.90it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 376.65it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 350.96it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 349.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 346.80it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 2564.54it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 493.10it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 753.02it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 490.50it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 513.09it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 404.43it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 448.23it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 386.03it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 406.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 386.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 385.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 383.59it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3092.00it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 469.27it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 739.12it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 482.74it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 532.31it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 410.88it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 456.94it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 392.26it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 422.34it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 401.64it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 400.02it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 398.20it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3209.11it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 549.75it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 874.13it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 539.29it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 584.65it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 449.97it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 486.22it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 413.28it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 505.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 477.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 475.23it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 472.74it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3128.91it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 518.81it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 824.07it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 513.74it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 559.34it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 431.37it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 470.63it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 400.99it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 487.77it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 459.14it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 456.71it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 454.27it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_all_are_missing_the_default_behavior] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 2548.18it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 473.96it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 725.56it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 475.23it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 511.89it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 401.64it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 447.80it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 376.93it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 408.31it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 389.68it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 388.19it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 386.48it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3010.99it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 507.97it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 807.22it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 505.17it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 511.34it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 402.83it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 447.99it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 384.88it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 414.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 394.13it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 392.51it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 390.72it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_without_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 2845.53it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 488.05it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 758.88it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 483.51it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 527.20it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 406.87it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 452.18it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 385.09it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 416.80it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 397.79it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 396.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 394.58it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_without_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 2919.81it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 491.54it/s] Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 763.96it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 484.15it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 513.29it/s]Calculating Metrics:  56%|█████▌    | 5/9 [00:00<00:00, 396.48it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 437.45it/s]Calculating Metrics:  67%|██████▋   | 6/9 [00:00<00:00, 376.53it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 466.03it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 441.59it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 439.74it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 437.51it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2955.82it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 630.53it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 912.85it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 593.48it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 658.94it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 522.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 535.45it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 503.97it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 500.91it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 497.67it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3150.06it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 609.81it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 934.66it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 593.65it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 652.75it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 517.39it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 551.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 517.07it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 514.04it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 510.60it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2945.44it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 578.68it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 892.64it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 581.47it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 639.30it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 511.55it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 618.61it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 578.33it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 574.79it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 570.64it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3189.58it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 614.24it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 930.88it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 599.79it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 666.84it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 522.80it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 623.34it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 583.22it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 579.54it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 575.42it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_all_are_missing_the_default_behavior] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2881.69it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 603.32it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 887.35it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 570.21it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 635.73it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 511.61it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 556.10it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 523.76it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 520.90it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 505.92it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2923.88it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 573.23it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 875.09it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 570.69it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 637.10it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 512.66it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 559.95it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 526.91it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 523.90it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 520.49it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3071.63it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 611.24it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 933.26it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 598.80it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 660.60it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 517.87it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 543.15it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 510.27it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 507.26it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 504.00it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_no_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3148.88it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 606.24it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 925.74it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 586.25it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 648.67it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 518.46it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 581.36it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 544.66it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 541.31it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 537.49it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_without_unexpected_index_list] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2840.71it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 587.56it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 902.34it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 598.80it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 662.96it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 527.09it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 630.41it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 585.95it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 582.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 577.91it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2981.03it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 561.82it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 825.28it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 463.52it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 497.97it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 388.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 449.07it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 388.26it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 204.51it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 203.44it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2391.96it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 368.65it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 563.77it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 381.57it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 433.13it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 352.28it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 404.73it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 380.97it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 379.00it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 376.80it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_successful_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2981.03it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 421.79it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 678.55it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 418.43it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 449.36it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 349.76it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 452.24it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 428.25it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 426.31it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 424.10it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_fails_expectation] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3252.66it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 588.72it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 909.68it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 573.31it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 631.54it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 493.29it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 593.24it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 550.28it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 546.71it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 542.82it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2813.08it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 545.71it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 826.63it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 529.23it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 594.80it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 470.14it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 516.26it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 484.29it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 481.37it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 478.41it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test_more_than_2_columns] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2962.08it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 529.35it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 826.10it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 527.42it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 586.30it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 459.05it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 505.47it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 475.48it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 473.07it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 470.31it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_negative_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3054.85it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 560.89it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 869.96it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 522.95it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 540.66it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 403.75it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 456.73it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 429.98it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 427.77it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 425.26it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_with_ignore_if_any_are_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3016.40it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 561.00it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 862.45it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 548.92it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 609.53it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 475.37it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 516.96it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 484.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 481.50it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 478.52it/s]
_ test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_different_value] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3090.87it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 550.65it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 863.91it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 541.57it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 605.99it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 472.24it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 513.02it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 479.64it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 476.93it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 474.01it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:trivial_case:_x__x] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3508.41it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 462.11it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 647.94it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 353.77it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 383.95it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 299.58it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 437.24it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 412.47it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 410.87it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 408.89it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_number_to_text] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3496.71it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 384.69it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 541.53it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 321.12it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 362.19it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 284.60it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 440.25it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 413.85it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 411.90it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 409.81it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_numbers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3787.18it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 443.33it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 613.20it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 350.26it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 378.81it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 293.64it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 432.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 409.39it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 407.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 406.03it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_number_to_text] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3597.17it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 481.91it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 675.81it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 377.77it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 417.27it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 311.33it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 446.02it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 419.57it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 417.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 415.47it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_numbers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3760.02it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 489.10it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 686.47it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 378.88it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 403.74it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 305.46it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 432.29it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 406.38it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 404.56it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 402.58it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_number_to_text] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3718.35it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 473.37it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 660.49it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 371.46it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 405.56it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 312.18it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 436.51it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 407.94it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 405.92it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 403.91it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_numbers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3711.77it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 487.82it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 681.82it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 374.67it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 405.77it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 306.94it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 457.41it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 431.80it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 429.94it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 427.90it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_explicitly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3832.16it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 480.42it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 673.57it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 379.80it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 398.76it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 306.99it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 430.50it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 406.11it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 404.37it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 402.38it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_by_default] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3802.63it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 473.37it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 664.29it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 372.40it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 395.37it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 303.30it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 422.06it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 399.43it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 397.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 396.08it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3851.52it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 493.22it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 692.36it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 379.25it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 404.20it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 307.91it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 434.07it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 410.17it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 408.42it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 406.56it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3723.31it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 478.47it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 656.04it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 380.33it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 407.00it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 312.01it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 430.87it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 406.96it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 405.24it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 403.33it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_ignore_row_if__either_value_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3953.16it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 487.71it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 684.30it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 380.91it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 407.62it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 313.49it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 454.41it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 427.66it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 425.64it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 423.55it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 5043.25it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 651.93it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 829.53it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 453.94it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 440.81it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 336.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 467.38it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 435.28it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 433.19it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 431.22it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:positive_test_with_nulls_and_ignore_row_if_either_value_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 3807.24it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 670.98it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 843.37it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 499.19it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 490.34it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 372.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 511.95it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 482.00it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 479.80it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 477.37it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:negative_test_with_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 5555.37it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 809.92it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 1023.75it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 558.89it/s] Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 528.48it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 409.80it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 535.90it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 500.47it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 497.69it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 494.56it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:another_positive_test_with_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 5637.51it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 817.44it/s] Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 1030.16it/s]Calculating Metrics:  40%|████      | 4/10 [00:00<00:00, 556.09it/s] Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 513.45it/s]Calculating Metrics:  50%|█████     | 5/10 [00:00<00:00, 400.51it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 503.96it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 474.57it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 472.43it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 470.15it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3412.78it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 335.24it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 477.71it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 264.95it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 301.54it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 226.46it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 349.43it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 323.48it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 322.06it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 320.77it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3283.21it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 334.83it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 478.55it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 261.99it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 301.25it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 223.89it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 352.68it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 327.90it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 326.76it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 325.37it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3483.64it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 295.33it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 422.88it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 237.24it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 276.82it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 209.97it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 339.69it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 314.84it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 313.69it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 312.52it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties_with_or_equal] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3731.59it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 328.62it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 466.66it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 259.77it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 300.19it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 231.12it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 375.81it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 351.73it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 350.55it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 349.15it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_parse_strings_as_datetimes_and_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3771.86it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 338.74it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 483.79it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 262.81it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 278.69it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 212.40it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 331.86it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 310.91it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 309.92it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 308.81it/s]
_ test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/9 [00:00<?, ?it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 3697.05it/s]Calculating Metrics:  22%|██▏       | 2/9 [00:00<00:00, 328.09it/s] Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 469.32it/s]Calculating Metrics:  33%|███▎      | 3/9 [00:00<00:00, 252.91it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 286.57it/s]Calculating Metrics:  44%|████▍     | 4/9 [00:00<00:00, 215.24it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 336.81it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 314.10it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 313.03it/s]Calculating Metrics: 100%|██████████| 9/9 [00:00<00:00, 311.87it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:trivial_case:_x__x] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2366.99it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 480.89it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 739.38it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 522.59it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 590.53it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 474.43it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 529.63it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 500.44it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 497.77it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 494.78it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_numbers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2941.31it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 595.23it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 904.58it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 587.46it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 650.70it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 512.35it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 550.44it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 518.14it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 515.10it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 511.71it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_numbers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2849.39it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 604.93it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 917.64it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 597.10it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 662.25it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 526.64it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 587.03it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 550.10it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 546.67it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 542.89it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_numbers] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3200.54it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 650.83it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 1002.28it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 644.66it/s] Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 714.09it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 557.35it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 583.31it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 547.01it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 543.85it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 540.18it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_explicitly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2746.76it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 565.57it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 865.97it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 550.20it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 611.02it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 481.37it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 526.56it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 496.89it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 494.28it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 491.27it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_by_default] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3124.25it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 642.85it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 982.79it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 591.43it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 653.93it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 522.08it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 625.58it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 580.42it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 576.41it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 572.07it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3101.15it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 617.67it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 958.53it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 626.09it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 698.72it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 555.74it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 659.69it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 615.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 610.59it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 605.70it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2490.68it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 500.90it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 753.73it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 443.02it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 496.47it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 403.29it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 495.60it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 465.17it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 462.46it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 459.27it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_ignore_row_if__either_value_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2632.13it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 524.12it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 809.05it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 529.88it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 571.29it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 453.97it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 512.20it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 484.86it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 482.25it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 479.42it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 4391.94it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 950.87it/s] Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 1250.72it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 853.22it/s] Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 853.64it/s]Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 688.49it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 633.71it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 596.58it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 593.40it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 589.86it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:positive_test_with_nulls_and_ignore_row_if_either_value_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 3529.57it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 848.65it/s] Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 1196.89it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 822.39it/s] Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 834.73it/s]Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 666.55it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 633.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 594.04it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 590.53it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 586.44it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:negative_test_with_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 4519.72it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 1048.23it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 1445.15it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 978.95it/s] Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 998.98it/s]Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 786.17it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 702.79it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 660.72it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 656.86it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 652.48it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:another_positive_test_with_nulls] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/10 [00:00<?, ?it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 4460.44it/s]Calculating Metrics:  30%|███       | 3/10 [00:00<00:00, 1069.52it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 1471.77it/s]Calculating Metrics:  60%|██████    | 6/10 [00:00<00:00, 1000.71it/s]Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 1029.60it/s]Calculating Metrics:  70%|███████   | 7/10 [00:00<00:00, 829.52it/s] Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 777.07it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 729.36it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 724.81it/s]Calculating Metrics: 100%|██████████| 10/10 [00:00<00:00, 719.79it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2778.60it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 424.83it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 667.56it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 420.34it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 481.52it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 375.54it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 424.79it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 396.65it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 394.97it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 393.03it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2958.94it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 446.82it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 721.48it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 441.22it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 502.16it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 387.33it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 445.53it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 415.28it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 413.42it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 411.27it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 2728.89it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 441.81it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 722.56it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 442.39it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 506.50it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 382.64it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 439.52it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 404.43it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 401.33it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 398.29it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties_with_or_equal] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3125.41it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 505.43it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 813.16it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 503.08it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 570.78it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 441.93it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 509.16it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 473.57it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 471.17it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 468.47it/s]
_ test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_mostly] _
----------------------------- Captured stderr call -----------------------------
Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:   0%|          | 0/8 [00:00<?, ?it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 3059.30it/s]Calculating Metrics:  25%|██▌       | 2/8 [00:00<00:00, 473.29it/s] Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 770.30it/s]Calculating Metrics:  50%|█████     | 4/8 [00:00<00:00, 470.38it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 538.06it/s]Calculating Metrics:  62%|██████▎   | 5/8 [00:00<00:00, 413.95it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 477.90it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 443.98it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 441.92it/s]Calculating Metrics: 100%|██████████| 8/8 [00:00<00:00, 439.52it/s]
=========================== short test summary info ============================
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multi_table_expectations/expect_table_row_count_to_equal_other_table:basic_positive]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multi_table_expectations/expect_table_row_count_to_equal_other_table:basic_negative]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_string_one_character_length]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:negative_test_string_value_is_1_too_high]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_with_missing_value_in_column_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:negative_one_length_too_small]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:positive_one_length_too_small_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_passes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_fails]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_equal:test_conditional_expectation_parser_errors]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_timedelta_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_timedelta_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_datetime_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_datetime_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:positive_test_with_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_integers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_string_only]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_json_parseable:negative_test_null_only]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps_tz_informed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps_tz_informed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_all_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:positive_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_no_mostly_one_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:positive_case_with_mostly_and_no_unexpected_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_null:negative_case_with_75percent_null_values_no_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_multiple_regexes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:negative_test_with_more_string-ish_strings]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_with_match_on__any]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex_list:positive_test_column_name_has_space_and_match_on__any]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_successful_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_unsuccessful_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_outlier]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_mostly_zero]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_min_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_min_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_passes0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_fails0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_parser_errors0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value_summary_output]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_exact_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_column_name_has_space]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:negative_test_one_missing_value_and_insufficent_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_exact_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_one_missing_value_and_sufficent_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_all_missing_values_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_empty_regex]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_more_complicated_regex]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_regex:positive_test_match_characters_not_at_the_beginning_of_string]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_min_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_min_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:missing_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:null_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_allow_cross_type_comparisons_again1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_passes1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_fails1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_between:test_conditional_expectation_parser_errors1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:basic_positive_test_case_single_value_not_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_case_include_one_existing_column_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_empty_values_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:basic_negative_strings_set_all_character_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_strings_set_extra_value_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly_summary_output]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_float_set_two_out_of_three_column_values_included_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_values_set_is_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_be_in_set:raise_typeerror_when_values_set_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:basic_python_int_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_test_python_ints_are_not_string]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_test_pandas_floats]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_test_pandas_strings]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_test_python_floats_are_not_python_bools]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics_object_underscore]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:dtype_object_and_type_object_still_has_aggregate_semantics_big_o]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_pandas_datetime_no_timezone]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:positive_pandas_datetime_with_timezone]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_pandas_datetime_with_timezone]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_of_type:negative_pandas_datetime_expected_int]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_number_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:vacuously_true_empty_value_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_case_exclude_existing_column_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_empty_values_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_strings_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_strings_set_extra_value_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_numbers_set_no_matching_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:positive_test_float_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:negative_test_float_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_passes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_fails]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_conditional_expectation_parser_errors]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:test_empty_column_should_be_vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_datetime_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_set:basic_negative_test_case_datetime_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:test_empty_column_should_be_vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_insufficient_mostly_and_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_exact_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_sufficient_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_one_missing_value_and_insufficent_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_one_missing_value_no_exceptions]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:positive_test_all_missing_values_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_empty_regex]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:positive_test_with_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_dateutil_parseable:test_raising_exception_for_wrong_input_data_type]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:positive_test_with_multiple_regexes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:2nd_basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_parse_strings_as_datetimes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_interspersed_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_missing_value_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_both_null_max_and_min_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_values_are_integers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_passes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_parser_errors]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:simple_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_wrong_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:positive_test_w_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:simple_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_out_of_bounds_value_for_month]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:negative_test_iso8601]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_input_data_type]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_strftime_format:test_raising_exception_for_wrong_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_multiple_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_all_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:positive_test_with_a_more_complex_schema]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:positive_case_with_mostly_and_no_unexpected_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_pandas_integer_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_pandas_float_values_are_not_strings]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_float_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_string_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_boolean_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_string_and_int_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_placeholder_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_string_one_character_length]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:negative_test_string_value_is_1_too_high]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_test_with_missing_value_in_column_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:negative_one_length_too_small]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_equal:positive_one_length_too_small_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_now_timedelta_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_now_timedelta_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_datetime_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_datetime_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps_tz_informed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps_tz_informed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:basic_positive_case_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_all_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:positive_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_no_mostly_one_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:positive_case_with_mostly_and_no_unexpected_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_null:negative_case_with_75percent_null_values_no_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_successful_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_unsuccessful_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_outlier]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_mostly_zero]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_z_scores_to_be_less_than:basic_test_with_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_min_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_min_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_basic_positive_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_positive_test_with_timestamps1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_min_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_min_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:missing_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:null_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:basic_negative_test_with_timestamps1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_positive_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:another_negative_test_with_result_format__boolean_only1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:2nd_positive_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:3rd_positive_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_with_mostly1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_again1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_improperly_mixed_types_once_more1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error:_missing_both_min_value_and_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:negative_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:positive_test_to_verify_that_the_denominator_for_mostly_works_with_missing_values1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:error_on_string-to-int_comparisons1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_min_value_is_greater_than_max_value1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_failure1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_min_success1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_failure1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_between:test_strict_max_success1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:basic_positive_test_case_single_value_not_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_case_include_one_existing_column_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_empty_values_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:basic_negative_strings_set_all_character_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_strings_set_extra_value_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:negative_test_float_set_two_out_of_three_column_values_included_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_float_set_two_out_of_three_column_values_included_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:positive_test_values_set_is_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_be_in_set:raise_typeerror_when_values_set_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:basic_sqlalchemy_int_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:negative_sqlite_integer_is_not_varchar]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:positive_test_sql_non_postgres_floats]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:positive_test_sql_varchar]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_of_type:negative_test_sqlalchemy_floats_are_not_boolean]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_test_case_number_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:vacuously_true_empty_value_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_case_exclude_existing_column_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_empty_values_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:basic_positive_strings_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_strings_set_extra_value_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_numbers_set_no_matching_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:positive_test_float_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:negative_test_float_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_set:test_empty_column_should_be_vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:positive_test_with_multiple_like_patternes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:negative_test_with_more_string-ish_strings]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern_list:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_insufficient_mostly_and_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_exact_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_sufficient_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_one_missing_value_and_insufficent_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_one_missing_value_no_exceptions]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_all_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:positive_test_all_missing_values_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_not_match_like_pattern:negative_test_match_characters_not_at_the_beginning_of_string_exact_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:negative_test_insufficient_mostly_and_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_exact_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_column_name_has_space]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_sufficient_mostly_w_one_non_matching_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:negative_test_one_missing_value_and_insufficent_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_one_missing_value_and_exact_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_one_missing_value_and_sufficent_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_all_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_all_missing_values_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern:positive_test_match_characters_not_at_the_beginning_of_string]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_min_max_too_small]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_max_min_too_large]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_null_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_with_max_lt_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:positive_test_with_missing_value_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_non_int_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_for_both_null_max_and_min_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_value_lengths_to_be_between:test_error_handling_values_are_integers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:negative_test_with_more_string-ish_strings]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_with_multiple_like_patternes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_with_match_on__any]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_match_like_pattern_list:positive_test_column_name_has_space_and_match_on__any]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:basic_negative_case_all_non_unique_character_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_using_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_case_using_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_multiple_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_case_non_unique_numeric_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:positive_case_all_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_unique:negative_multiple_duplicate_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:basic_positive_case_basic_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_no_missing_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:positive_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:positive_case_with_mostly_and_no_unexpected_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_null:negative_case_with_75percent_non_null_values_no_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_sqlalchemy_integer_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_sqlalchemy_float_values_are_not_text]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_float_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_text_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_boolean_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_text_and_integer_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_map_expectations/expect_column_values_to_be_in_type_list:positive_test_placeholder_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_zero_stdev_exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_max_exact_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_min_exact_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_missing_value_in_column_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:vacuously_true_universal_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_negative_test_no_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_some_set_intersection_and_extra]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_tie_for_most_common_with_missing_values_and_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__full_value_set__ties_okay__false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common__ties_okay__true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common_but_test_for_last_value__ties_okay__true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test_string_values_value_set_contains_more_than_actual_mode_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_string_values_value_set_contains_more_than_actual_mode_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_extremes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_normal_quantiles]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_uneven_spacing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_normal_quantiles_wrong_distribution]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_disordered_quantile_ranges]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:basic_negative_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:negative_test_case_with_only_a_lower_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:datetime_except_sqlite]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_except_sqlite]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_max_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_range]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_exact_match]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range_match]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_includes_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:vacuously_true_missing_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:type_mismatch_null_observed_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_and_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_mean_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_negative_test_set_contained]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_some_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:basic_negative_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_result_format_summary]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_lower_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_sum_to_be_between:raise_valueerror_with_both_max_and_min_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_min_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_max_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:vacuously_true_null_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_min_equal_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_min_equal_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_missing_value_in_column_exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_missing_value_in_column_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:vacuously_true_both_min_and_max_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_max_value_none]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_lower_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:test_on_a_series_with_mostly_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_min_to_be_between:raise_valueerror_with_both_max_and_min_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:null_max_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:vacuously_true_null_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_no_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_some_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_string_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_string_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_date_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_date_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test_case_datetime_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_case_datetime_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test__exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_zero_stdev_exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_max_exact_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_null_min_exact_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:negative_test_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_stdev_to_be_between:positive_test_missing_value_in_column_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:vacuously_true_universal_set]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:positive_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:basic_negative_test_no_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_some_set_intersection_and_extra]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_be_in_set:negative_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_tie_for_most_common_with_missing_values_and_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__full_value_set__ties_okay__false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common__ties_okay__true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test__tie_for_most_common_but_test_for_last_value__ties_okay__true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test__tie_for_most_common__value_set_does_not_match__ties_okay__true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:positive_test_string_values_value_set_contains_more_than_actual_mode_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_most_common_value_to_be_in_set:negative_test_string_values_value_set_contains_more_than_actual_mode_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_extremes]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_normal_quantiles]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_positive_test_uneven_spacing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_normal_quantiles_wrong_distribution]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_quantile_values_to_be_between:basic_negative_test_disordered_quantile_ranges]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:basic_negative_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:negative_test_case_with_only_a_lower_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_sqlite]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:datetime_with_evaluation_parameter_sqlite]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_max_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_range]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_exact_match]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_positive_exact_match1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_negative_range_match]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:simple_mean_includes_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:vacuously_true_missing_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:coerced_types_true_false_and_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:catch_exceptions___non_number_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_mean_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:positive_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:basic_negative_test_set_contained]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_some_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_equal_set:negative_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:basic_negative_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_result_format_summary]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_lower_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:negative_test_case_with_only_a_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_sum_to_be_between:raise_valueerror_with_both_max_and_min_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_min_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:null_max_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_unique_value_count_to_be_between:vacuously_true_null_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_min_equal_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_null_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_min_equal_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_null_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:positive_test_missing_value_in_column_exact_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:negative_test_missing_value_in_column_complete_result_format]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:vacuously_true_both_min_and_max_null]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_median_to_be_between:test_empty_column_should_be_false_no_observed_value_with_which_to_compare]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:basic_positive_test_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_max_value_none]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_result_format_summary_also_verifies_that_max_value_is_inclusive]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_case_with_only_a_lower_bound_and_a_missing_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_lower_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:test_on_a_series_with_mostly_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:negative_test_case_with_only_a_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_min_to_be_between:raise_valueerror_with_both_max_and_min_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:null_max_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_proportion_of_unique_values_to_be_between:vacuously_true_null_min_and_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:basic_negative_test_no_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_some_set_intersection]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_null_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_with_duplicate_values_in_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_duplicate_and_null_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:positive_test_string_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_aggregate_expectations/expect_column_distinct_values_to_contain_set:negative_test_string_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_baseline_categorical_fixed_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_categorical_fixed_alternate_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:internal_holdout_with_categorical_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_05]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:missing_vals_no_holdout]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_explicit_infinite_endpoints]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_test_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_should_fail_with_no_holdout]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_should_always_succeed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_and_partition_object_supports_profiling]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_tail_weights_should_fail_with_no_internal_holdout]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_uniform_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_ntile_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_kde_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_uniform_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_ntile_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_kde_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_bimodal_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_uniform_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity_tail_weight]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:empty_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_tail_weight]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_internal_weight]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence_bins_do_not_cover_all_data]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_return_partitions_should_have_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_tail_weights_return_partitions_should_have_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_empty_tail_weights_in_return]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_observed_with_tail_weight_infinite_kl_divergence]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_infinite_endpoints_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_infinite_endpoint_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_infinite_endpoint_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_baseline_categorical_fixed_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:discrete_categorical_fixed_alternate_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:internal_holdout_with_categorical_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:holdout_0_05]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:missing_vals_no_holdout]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_explicit_infinite_endpoints]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_test_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_should_fail_with_no_holdout]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_null_threshold_should_always_succeed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:norm_0_1_auto_inf_partition_tail_weights_should_fail_with_no_internal_holdout]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_uniform_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_ntile_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_norm_0_1_kde_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_uniform_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_ntile_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_norm_1_1_column_norm_0_1_kde_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:positive_bimodal_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_auto_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:negative_bimodal_column_norm_0_1_uniform_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_inf_bound_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_inf_bound_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_and_upper_inf_bounds1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:tail_weight_holdout_is_not_defined_for_partitions_already_extending_to_inifinity_tail_weight]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:empty_partition]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_tail_weight]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:too_big_internal_weight]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence0]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence1]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_undefined_infinite_kl_divergence_bins_do_not_cover_all_data]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_return_partitions_should_have_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_tail_weights_return_partitions_should_have_tail_weights]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_empty_tail_weights_in_return]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_observed_with_tail_weight_infinite_kl_divergence]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_infinite_endpoints_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_upper_infinite_endpoint_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_lower_infinite_endpoint_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_distributional_expectations/expect_column_kl_divergence_to_be_less_than:manual_partition_bounded_endpoints_non_zero_tail_hold_out]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_positive_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_upper_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_lower_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:basic_negative_case_kwargs_args]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_equal:invalid_arguments_throws_exception]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:positive_test_with_column_order]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_column_to_exist:column_exists_but_wrong_index]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_min_greater_than_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_misnamed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_columns_are_right_but_ordering_wrong]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_extra_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_ordered_list:null_list_provides_vacuously_true_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_max_lt_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_missing_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_column_is_missing_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:negative_test_null_set_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_columns_to_match_set:positive_test_vacuously_true_null_set_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_positive_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_upper_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_lower_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:basic_negative_case_kwargs_args]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/other_expectations/expect_table_column_count_to_equal:invalid_arguments_throws_exception]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_positive_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_upper_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_lower_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:basic_negative_case_kwargs_args]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_equal:invalid_arguments_throws_exception]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:positive_test_with_column_order]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_column_to_exist:column_exists_but_wrong_index]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_min_greater_than_max]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:positive_test_with_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_row_count_to_be_between:test_error_handling_for_non_int_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_column_is_misnamed]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_columns_are_right_but_ordering_wrong]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:negative_test_extra_column]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_ordered_list:null_list_provides_vacuously_true_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:vacuously_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_max_lt_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:positive_test_with_null_min]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_min_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_be_between:test_error_handling_for_non_int_max_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:basic_positive_test_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_missing_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_column_is_missing_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_column_is_misnamed_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_columns_are_right_but_ordering_wrong_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_extra_column_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:negative_test_null_set_exact_match_true]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_columns_to_match_set:positive_test_vacuously_true_null_set_exact_match_false]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_positive_case]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_upper_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_lower_error]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:basic_negative_case_kwargs_args]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/other_expectations/expect_table_column_count_to_equal:invalid_arguments_throws_exception]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_incorrectly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_all_are_missing_the_default_behavior]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:row_condition_with_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_with_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_without_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_with_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_without_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_incorrectly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_all_are_missing_the_default_behavior]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_with_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_without_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_incorrectly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test_more_than_2_columns]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:row_condition_with_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_with_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_different_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_default_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:mostly_set_incorrectly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_all_are_missing_the_default_behavior]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:basic_test_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_without_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_compound_columns_to_be_unique:unexpected_values_exact_match_out_without_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_default_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:mostly_set_incorrectly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_all_are_missing_the_default_behavior]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:basic_test_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_no_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_select_column_values_to_be_unique_within_record:unexpected_values_exact_match_out_without_unexpected_index_list]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_default_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_successful_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_fails_expectation]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:mostly_set_incorrectly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_positive_test_more_than_2_columns]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:basic_negative_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_with_ignore_if_any_are_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/multicolumn_map_expectations/expect_multicolumn_sum_to_equal:negative_test_different_value]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:trivial_case:_x__x]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_number_to_text]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_numbers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_number_to_text]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_numbers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_number_to_text]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_numbers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_explicitly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_by_default]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_ignore_row_if__either_value_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:positive_test_with_nulls_and_ignore_row_if_either_value_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:negative_test_with_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:another_positive_test_with_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties_with_or_equal]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_parse_strings_as_datetimes_and_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:trivial_case:_x__x]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:basic_negative_example_compare_numbers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mostly_compare_numbers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:positive_example_with_mismatched_null_values_and_ignore_row_if__either_value_is_missing_compare_numbers]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_explicitly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example_with_mismatched_null_values_and_ignore_row_if__both_values_are_missing_set_by_default]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_negative_example]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_mostly]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_equal:a_positive_example_with_ignore_row_if__either_value_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:basic_positive_test_without_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:positive_test_with_nulls_and_ignore_row_if_either_value_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:negative_test_with_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_to_be_in_set:another_positive_test_with_nulls]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_ties_with_or_equal]
PASSED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[sqlite/column_pair_map_expectations/expect_column_pair_values_A_to_be_greater_than_B:test_mostly]
SKIPPED [190] tests/test_definitions/test_expectations_v3_api.py:405: Skipped
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:positive_test_with_mostly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_decreasing:basic_negative_test_with_strictly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:basic_negative_test]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_not_match_regex_list:negative_test_with_more_string-ish_strings]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:positive_test_with_strictly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:basic_negative_test]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_increasing:negative_test_with_interspersed_nulls]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_min_max_too_small]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_matching_max_min_too_large]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:negative_test_with_max_lt_min]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_value_lengths_to_be_between:test_conditional_expectation_fails]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:basic_negative_case_all_non_unique_character_values]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:multi_type_column_contains_2_and_quoted_2_suppressed_for_sqalchemy]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:positive_case_using_mostly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_case_using_mostly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_case_non_unique_numeric_values]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_unique:negative_multiple_duplicate_values]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_match_json_schema:basic_negative_test]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_no_missing_values]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:positive_mostly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_mostly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_null:negative_case_with_75percent_non_null_values_no_mostly]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_string_and_int_values_summary_output]
FAILED tests/test_definitions/test_expectations_v3_api.py::test_case_runner_v3_api[pandas/column_map_expectations/expect_column_values_to_be_in_type_list:negative_test_string_and_int_values_complete_output]
========== 25 failed, 894 passed, 190 skipped, 45 warnings in 50.15s ===========
